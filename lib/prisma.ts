// lib/prisma.ts - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase

import { PrismaClient } from '@prisma/client'

declare global {
  var __prisma: PrismaClient | undefined
  var __prismaHandlersAdded: boolean | undefined
}

// –°–æ–∑–¥–∞–µ–º singleton instance Prisma Client —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const createPrismaClient = () => {
  console.log('üîß [Prisma] –°–æ–∑–¥–∞–Ω–∏–µ PrismaClient –¥–ª—è Supabase...')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå [Prisma] DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    throw new Error('DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
  }
  
  console.log('üîç [Prisma] DATABASE_URL –Ω–∞–π–¥–µ–Ω–∞:', process.env.DATABASE_URL.substring(0, 50) + '...')
  
  return new PrismaClient({
    log: process.env.NODE_ENV === 'development' 
      ? ['error', 'warn'] 
      : ['error'],
    datasources: {
      db: {
        url: process.env.DATABASE_URL
      }
    }
  })
}

// Singleton pattern –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const prisma = globalThis.__prisma ?? createPrismaClient()

if (process.env.NODE_ENV === 'development') {
  globalThis.__prisma = prisma
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
export async function checkPrismaConnection(retries = 3): Promise<{
  connected: boolean;
  latency?: number;
  error?: string;
}> {
  for (let i = 0; i < retries; i++) {
    const startTime = Date.now()
    
    try {
      console.log(`üîç [Prisma] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${i + 1}/${retries}...`)
      
      await prisma.$queryRaw`SELECT 1 as health_check`
      
      const latency = Date.now() - startTime
      console.log(`‚úÖ [Prisma] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∑–∞–¥–µ—Ä–∂–∫–∞: ${latency}ms`)
      
      return { connected: true, latency }
      
    } catch (error: any) {
      console.error(`‚ùå [Prisma] –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message)
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      if (i === retries - 1) {
        return { 
          connected: false, 
          error: error.message
        }
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
      const delay = Math.pow(2, i) * 1000 // 1s, 2s, 4s
      console.log(`‚è≥ [Prisma] –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`)
      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }
  
  return { connected: false, error: '–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã' }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å retry
export async function safePrismaOperation<T>(
  operation: () => Promise<T>,
  operationName: string,
  retries = 2
): Promise<T> {
  for (let i = 0; i < retries; i++) {
    try {
      console.log(`üîÑ [Prisma] –í—ã–ø–æ–ª–Ω—è–µ–º ${operationName} (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries})`)
      
      const result = await operation()
      console.log(`‚úÖ [Prisma] ${operationName} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`)
      return result
      
    } catch (error: any) {
      console.error(`‚ùå [Prisma] ${operationName} –Ω–µ —É–¥–∞–ª–æ—Å—å (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}):`, error.message)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      const isConnectionError = error.code === 'P1001' || 
                               error.code === 'P1017' ||
                               error.message.includes('database server') ||
                               error.message.includes('connection')
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –Ω–µ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º
      if (i === retries - 1 || !isConnectionError) {
        throw error
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      const delay = Math.pow(2, i) * 1000
      console.log(`‚è≥ [Prisma] –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms...`)
      await new Promise(resolve => setTimeout(resolve, delay))
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      try {
        await prisma.$disconnect()
        await prisma.$connect()
        console.log('üîÑ [Prisma] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
      } catch (reconnectError) {
        console.warn('‚ö†Ô∏è [Prisma] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError)
      }
    }
  }
  
  throw new Error(`–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${operationName} –∏—Å—á–µ—Ä–ø–∞–Ω—ã`)
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
async function initializePrisma() {
  try {
    console.log('üöÄ [Prisma] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.DATABASE_URL) {
      throw new Error('DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    }
    
    if (!process.env.DIRECT_URL) {
      console.warn('‚ö†Ô∏è [Prisma] DIRECT_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const connectTimeout = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Connection timeout')), 10000)
    );
    
    const connectPromise = prisma.$connect();
    
    await Promise.race([connectPromise, connectTimeout]);
    console.log('‚úÖ [Prisma] –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    const healthCheck = await checkPrismaConnection(1)
    if (!healthCheck.connected) {
      console.warn('‚ö†Ô∏è [Prisma] Health check –Ω–µ –ø—Ä–æ—à–µ–ª, –Ω–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω')
    }
    
  } catch (error: any) {
    console.error('‚ùå [Prisma] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    if (error.message.includes('Can\'t reach database server')) {
      console.error('üö® [Prisma] –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Supabase. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:')
      console.error('   1. DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ')
      console.error('   2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞')
      console.error('   3. –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ Supabase')
    }
    
    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–≥–ª–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
if (typeof window === 'undefined') {
  initializePrisma().catch(error => {
    console.error('üö® [Prisma] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
  })
}

// Graceful shutdown handlers
const shutdown = async () => {
  console.log('üì§ [Prisma] –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î...')
  
  try {
    await prisma.$disconnect()
    console.log('‚úÖ [Prisma] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
  } catch (error) {
    console.error('‚ùå [Prisma] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏:', error)
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
if (!global.__prismaHandlersAdded) {
  process.setMaxListeners(20); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç listeners
  
  process.on('beforeExit', shutdown)
  process.on('SIGINT', async () => {
    await shutdown()
    process.exit(0)
  })
  process.on('SIGTERM', async () => {
    await shutdown()
    process.exit(0)
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π Promise
  process.on('unhandledRejection', (reason, promise) => {
    console.error('üö® [Prisma] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:', reason)
  })
  
  global.__prismaHandlersAdded = true;
  console.log('‚úÖ [Prisma] Event handlers registered');
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Supabase
export async function checkSupabaseStatus(): Promise<{
  status: 'healthy' | 'degraded' | 'down';
  details: any;
}> {
  try {
    const startTime = Date.now()
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await prisma.$queryRaw`SELECT current_timestamp`
    
    const responseTime = Date.now() - startTime
    
    return {
      status: responseTime < 1000 ? 'healthy' : 'degraded',
      details: {
        responseTime,
        timestamp: new Date().toISOString()
      }
    }
    
  } catch (error: any) {
    return {
      status: 'down',
      details: {
        error: error.message,
        code: error.code,
        timestamp: new Date().toISOString()
      }
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π client –∏ —É—Ç–∏–ª–∏—Ç—ã
export { prisma }
export default prisma