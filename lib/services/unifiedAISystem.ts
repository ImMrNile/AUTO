// lib/services/unifiedAISystem.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–†–û–ú–ü–¢–´

import OpenAI from 'openai';
import { prisma } from '../prisma';

// –£–í–ï–õ–ò–ß–ï–ù–ù–´–ï –¢–ê–ô–ú–ê–£–¢–´
export const QUALITY_REQUIREMENTS = {
  CHARACTERISTICS_MIN_FILL_RATE: 60,
  SEO_DESCRIPTION_MIN_LENGTH: 1300,
  SEO_DESCRIPTION_MAX_LENGTH: 2000,
  SEO_TITLE_MAX_LENGTH: 60,
  MAX_RETRIES: 3,
  REQUEST_TIMEOUT: 180000, // 3 –º–∏–Ω—É—Ç—ã
  AGENT_TIMEOUT: 240000 // 4 –º–∏–Ω—É—Ç—ã
};

// –ú–æ–¥–µ–ª–∏ GPT-5 
const MODELS = {
  GPT5_MINI: 'gpt-5-mini',
  GPT5: 'gpt-5'
};

// –°—Ç–æ–∏–º–æ—Å—Ç—å (–∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤)
const PRICING = {
  'gpt-5-mini': { input: 0.25, output: 2.00, cachedInput: 0.025 },
  'gpt-5': { input: 1.25, output: 2.00, cachedInput: 0.025 }
};

interface ProductInput {
  productName: string;
  productImages: string[];
  categoryId: number;
  packageContents: string;
  referenceUrl?: string;
  price: number;
  dimensions: {
    length: number;
    width: number;
    height: number;
    weight: number;
  };
  hasVariantSizes?: boolean;
  variantSizes?: any[];
  aiPromptComment?: string;
  preserveUserData?: {
    preserveUserData: boolean;
    userProvidedPackageContents: string;
    userProvidedDimensions: any;
    specialInstructions: string;
  };
}

interface CategoryCharacteristic {
  id: number;
  wbCharacteristicId?: number;
  name: string;
  type: 'string' | 'number';
  isRequired: boolean;
  maxLength?: number;
  minValue?: number;
  maxValue?: number;
  description?: string;
  values?: Array<{
    id: number;
    value: string;
    displayName: string;
  }>;
}

interface AgentResult {
  success: boolean;
  data: any;
  confidence: number;
  tokensUsed: number;
  cost: number;
  processingTime: number;
  error?: string;
}

interface FinalResult {
  characteristics: Array<{
    id: number;
    name: string;
    value: any;
    confidence: number;
    reasoning: string;
    detectedType: string;
    source: string;
  }>;
  seoTitle: string;
  seoDescription: string;
  qualityMetrics: {
    overallScore: number;
    fillRate: number;
    characteristicsFillRate: number;
    seoDescriptionLength: number;
    seoTitleLength: number;
    isQualityAcceptable: boolean;
    issues: string[];
    suggestions: string[];
  };
  analysisReport: {
    totalProcessingTime: number;
    totalCost: number;
    agent1Time: number;
    agent2Time: number;
    agent3Time: number;
    improvementAttempts: number;
    finalScore: number;
  };
  confidence: number;
  fillPercentage: number;
  warnings: string[];
  recommendations: string[];
}

export class UnifiedAISystem {
  private openai: OpenAI;

  constructor() {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    this.openai = new OpenAI({ 
      apiKey,
      timeout: QUALITY_REQUIREMENTS.REQUEST_TIMEOUT,
      maxRetries: 3,
    });
  }

  /**
   * –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–û–ô –ê–ì–ï–ù–¢ 1 –¥–ª—è GPT-5-mini
   */
 
  // –ù–ê –≠–¢–û–¢:
  private createAgent1Prompt(input: ProductInput): string {
    const hasReference = input.referenceUrl && input.referenceUrl.trim().length > 0;
    
    if (hasReference) {
      // –° —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É + —Ñ–æ—Ç–æ
      return `–ê–ù–ê–õ–ò–ó–ò–†–£–ô —Ç–æ–≤–∞—Ä –ø–æ –†–ï–§–ï–†–ï–ù–°–ù–û–ô –°–°–´–õ–ö–ï + —Ñ–æ—Ç–æ: "${input.productName}"
  
  –†–ï–§–ï–†–ï–ù–°: ${input.referenceUrl}
  
  –ó–ê–î–ê–ß–ò:
  1. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–ï —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  2. –î–æ–ø–æ–ª–Ω–∏ –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
  3. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Å—Å—ã–ª–∫–∏
  
  –ò–ó–í–õ–ï–ö–ò: —Ä–∞–∑–º–µ—Ä—ã, –≤–µ—Å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞, —Ç–µ—Ö–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é, —Å—Ç—Ä–∞–Ω—É, –±—Ä–µ–Ω–¥
  
  JSON –æ—Ç–≤–µ—Ç:
  {
    "hasReferenceAnalysis": true,
    "referenceData": {
      "url": "${input.referenceUrl}",
      "characteristics": [
        {"name": "–†–∞–∑–º–µ—Ä—ã", "value": "—Ç–æ—á–Ω—ã–µ —Å —Å–∞–π—Ç–∞", "source": "reference"}
      ]
    },
    "photoData": {
      "characteristics": [
        {"name": "—á—Ç–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ", "value": "–∑–Ω–∞—á–µ–Ω–∏–µ", "source": "photo"}
      ]
    },
    "finalCharacteristics": [
      {"name": "–∏—Ç–æ–≥–æ–≤–æ–µ", "value": "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É", "type": "string", "confidence": 0.95}
    ],
    "confidence": 0.95
  }`;
  
    } else {
      // –ë–µ–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ - –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ + —Ñ–æ—Ç–æ  
      return `–ù–ê–ô–î–ò –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ "${input.productName}" –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ + –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ.
  
  –ê–ö–¢–ò–í–ù–û –ò–©–ò –í –ò–ù–¢–ï–†–ù–ï–¢–ï:
  - "${input.productName} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
  - "${input.productName} —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è" 
  - "${input.productName} –æ–±–∑–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
  
  –ò–ó–í–õ–ï–ö–ò: —Ä–∞–∑–º–µ—Ä—ã, –≤–µ—Å, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞, —Ç–µ—Ö–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é
  
  JSON –æ—Ç–≤–µ—Ç:
  {
    "hasReferenceAnalysis": false,
    "internetSearch": {
      "queries": ["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"],
      "sources": ["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã"]
    },
    "photoData": {
      "characteristics": [{"name": "–∏–∑ —Ñ–æ—Ç–æ", "value": "–∑–Ω–∞—á–µ–Ω–∏–µ", "source": "photo"}]
    },
    "finalCharacteristics": [
      {"name": "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞", "value": "–Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "type": "string", "confidence": 0.8}
    ],
    "confidence": 0.8
  }`;
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–ì–ï–ù–¢ 2: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID
   */
/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–ì–ï–ù–¢ 2: –†–∞–±–æ—Ç–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –ê–≥–µ–Ω—Ç–∞ 1 (—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º –∏–ª–∏ –±–µ–∑)
 */
private createAgent2Prompt(
    input: ProductInput, 
    agent1Data: any, 
    characteristics: CategoryCharacteristic[]
  ): string {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—ã–ª–∏ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const hasReferenceData = agent1Data.hasReferenceAnalysis && agent1Data.referenceData;
    const finalCharacteristics = agent1Data.finalCharacteristics || [];
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const excludedWbIds = new Set([
      // –ì–∞–±–∞—Ä–∏—Ç—ã –∏ —É–ø–∞–∫–æ–≤–∫–∞
      89008, 90630, 90607, 90608, 90652, 90653, 11002, 90654, 90655, 90673,
      // –¶–≤–µ—Ç (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)  
      14177449,
      // –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è (–∑–∞—â–∏—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
      14177441, 378533,
      // –ù–î–°/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã/–¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏
      14177472, 14177473, 14177474, 15001405, 15001135, 15001136, 15001137, 15001138,
      // –ö–æ–¥—ã –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
      15001650, 15001706
    ]);
    
    const relevantChars = characteristics.filter(char => 
      !excludedWbIds.has(char.wbCharacteristicId || 0)
    );
    
    const minFillTarget = Math.ceil(relevantChars.length * 0.75); // –¶–µ–ª—å 75%
    
    return `–°–æ–ø–æ—Å—Ç–∞–≤—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ WB –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
  
  –¢–û–í–ê–†: "${input.productName}" (${input.price}‚ÇΩ)
  
  ${hasReferenceData ? 'üìé –î–ê–ù–ù–´–ï –° –†–ï–§–ï–†–ï–ù–°–ù–û–ô –°–¢–†–ê–ù–ò–¶–´:' : 'üîç –î–ê–ù–ù–´–ï –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê –ò –§–û–¢–û:'}
  ${finalCharacteristics.length > 0 ? 
    finalCharacteristics.map((char: any, i: number) => 
      `${i+1}. ${char.name}: ${char.value} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${char.source || 'unknown'}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${char.confidence || 0.8})`
    ).join('\n') : 
    '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
  }
  
  ${hasReferenceData ? `
  üéØ –†–ï–§–ï–†–ï–ù–°–ù–ê–Ø –°–°–´–õ–ö–ê: ${agent1Data.referenceData.url}
  –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞: ${agent1Data.referenceData.characteristics?.length || 0} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  ` : `
  üîç –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•: ${agent1Data.internetSearch ? 
    `–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (${agent1Data.internetSearch.queries?.length || 0} –∑–∞–ø—Ä–æ—Å–æ–≤)` : 
    '–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∏ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
  }`}
  
  –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò WB –ö–ê–¢–ï–ì–û–†–ò–ò (–¶–ï–õ–¨: –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω–∏–º—É–º ${minFillTarget} –∏–∑ ${relevantChars.length}):
  
  –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï (–∑–∞–ø–æ–ª–Ω–∏ –í–°–ï):
  ${relevantChars.filter(c => c.isRequired).map((char, i) => 
    `${i+1}. ${char.name} (ID: ${char.id})
     - WB_ID: ${char.wbCharacteristicId}
     - –¢–∏–ø: ${char.type.toUpperCase()}
     - ${char.values?.length ? `–í–∞—Ä–∏–∞–Ω—Ç—ã: ${char.values.slice(0, 3).map(v => v.value).join(', ')}` : '–°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥'}`
  ).join('\n\n')}
  
  –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï (–∑–∞–ø–æ–ª–Ω–∏ –º–∞–∫—Å–∏–º—É–º):
  ${relevantChars.filter(c => !c.isRequired).slice(0, 20).map((char, i) => 
    `${i+1}. ${char.name} (ID: ${char.id}) - ${char.type.toUpperCase()}${
      char.values?.length ? ` [–í–∞—Ä–∏–∞–Ω—Ç—ã: ${char.values.slice(0, 2).map(v => v.value).join(', ')}]` : ''
    }`
  ).join('\n')}
  
  –ü–†–ê–í–ò–õ–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:
  1. ${hasReferenceData ? '–ò–°–ü–û–õ–¨–ó–£–ô –î–ê–ù–ù–´–ï –° –†–ï–§–ï–†–ï–ù–°–ê –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã' : '–ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞'}
  2. –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–π –ø–æ —Å–º—ã—Å–ª—É: "–ì–∞–±–∞—Ä–∏—Ç—ã" ‚Üí "–î–ª–∏–Ω–∞"/"–®–∏—Ä–∏–Ω–∞"/"–í—ã—Å–æ—Ç–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª –∫–æ—Ä–ø—É—Å–∞" ‚Üí "–ú–∞—Ç–µ—Ä–∏–∞–ª"
  3. –¢–û–ß–ù–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø:
     - STRING: —Ç–µ–∫—Å—Ç —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ ("Bluetooth 5.0", "–ø–ª–∞—Å—Ç–∏–∫ ABS", "–∫—Ä–∞—Å–Ω—ã–π –≥–ª—è–Ω—Ü–µ–≤—ã–π")
     - NUMBER: —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (150, 25.5, 1200)
  4. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è - –∏—Å–ø–æ–ª—å–∑—É–π –ª–æ–≥–∏–∫—É:
     - –¶–µ–Ω–∞ ${input.price}‚ÇΩ ‚Üí –æ–ø—Ä–µ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –∏ —Ç–∏–ø–∏—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
     - –¢–∏–ø —Ç–æ–≤–∞—Ä–∞ ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  5. –ù–ï –û–°–¢–ê–í–õ–Ø–ô –ü–£–°–¢–´–ú–ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  
  –ü–†–ò–ú–ï–†–´ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:
  - –ù–∞–π–¥–µ–Ω–æ "–†–∞–∑–º–µ—Ä—ã: 15x10x5 —Å–º" ‚Üí –∑–∞–ø–æ–ª–Ω–∏ "–î–ª–∏–Ω–∞": 15, "–®–∏—Ä–∏–Ω–∞": 10, "–í—ã—Å–æ—Ç–∞": 5  
  - –ù–∞–π–¥–µ–Ω–æ "–í–µ—Å: 300–≥" ‚Üí –∑–∞–ø–æ–ª–Ω–∏ "–í–µ—Å": 300
  - –ù–∞–π–¥–µ–Ω–æ "–ú–∞—Ç–µ—Ä–∏–∞–ª: –ø–ª–∞—Å—Ç–∏–∫" ‚Üí –∑–∞–ø–æ–ª–Ω–∏ "–û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª": "–ø–ª–∞—Å—Ç–∏–∫"
  
  JSON –û–¢–í–ï–¢:
  {
    "characteristics": [
      {
        "id": ${relevantChars[0]?.id || 1},
        "name": "${relevantChars[0]?.name || '–ù–∞–∑–≤–∞–Ω–∏–µ'}",
        "value": "${hasReferenceData ? '—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞' : '–Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'}",
        "confidence": ${hasReferenceData ? '0.95' : '0.85'},
        "source": "${hasReferenceData ? 'reference_page' : 'internet_analysis'}"
      }
    ],
    "fillStatistics": {
      "totalFilled": —á–∏—Å–ª–æ,
      "totalRequired": ${relevantChars.filter(c => c.isRequired).length},
      "requiredFilled": —á–∏—Å–ª–æ,
      "totalAvailable": ${relevantChars.length},
      "fillRate": –ø—Ä–æ—Ü–µ–Ω—Ç,
      "targetAchieved": true/false
    },
    "dataSource": {
      "hasReference": ${hasReferenceData},
      "referenceUrl": "${hasReferenceData ? agent1Data.referenceData?.url || '' : ''}",
      "sourceQuality": "${hasReferenceData ? 'high' : 'medium'}",
      "mappingMethod": "${hasReferenceData ? 'reference_based' : 'internet_analysis'}"
    },
    "confidence": ${hasReferenceData ? '0.95' : '0.85'}
  }
  
  ${hasReferenceData ? 
    `üéØ –ü–†–ò–û–†–ò–¢–ï–¢: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ${minFillTarget}+ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.` :
    `üîç –¶–ï–õ–¨: –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ${minFillTarget}+ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.`
  }`;
  }
  
  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–ì–ï–ù–¢ 3: –ö—Ä–∞—Ç–∫–∏–π SEO
   */
  private createAgent3Prompt(input: ProductInput, agent1Data: any, agent2Data: any): string {
    return `
–°–æ–∑–¥–∞–π SEO –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Wildberries.

–¢–û–í–ê–†: ${input.productName}


–õ–ò–ú–ò–¢–´:
- –ù–∞–∑–≤–∞–Ω–∏–µ: –º–∞–∫—Å ${QUALITY_REQUIREMENTS.SEO_TITLE_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤
- –û–ø–∏—Å–∞–Ω–∏–µ: ${QUALITY_REQUIREMENTS.SEO_DESCRIPTION_MIN_LENGTH}-${QUALITY_REQUIREMENTS.SEO_DESCRIPTION_MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤

JSON –û–¢–í–ï–¢:
{
  "seoTitle": "SEO –Ω–∞–∑–≤–∞–Ω–∏–µ",
  "seoDescription": "SEO –æ–ø–∏—Å–∞–Ω–∏–µ",
  "confidence": 0.0-1.0
}

–í–ê–ñ–ù–û: –ë–µ–∑ –≤–æ–¥—ã, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.`.trim();
  }

  
  // –ù–ê:
  private async runAgent1_Research(input: ProductInput): Promise<AgentResult> {
    const startTime = Date.now();
    const hasReference = input.referenceUrl && input.referenceUrl.trim().length > 0;
    
    console.log(`üîç –ê–ì–ï–ù–¢ 1 (${hasReference ? '—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º' : '–ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ'}): "${input.productName}"`);
    
    for (let attempt = 1; attempt <= QUALITY_REQUIREMENTS.MAX_RETRIES; attempt++) {
      try {
        const prompt = this.createAgent1Prompt(input);
        
        let messages;
        if (input.productImages && input.productImages.length > 0) {
          messages = await this.prepareMessagesWithImages(prompt, input.productImages);
        } else {
          messages = [{ role: 'user', content: prompt }];
        }
        
        const response = await this.openai.chat.completions.create({
          model: MODELS.GPT5_MINI,
          messages,
          max_completion_tokens: hasReference ? 8000 : 6000, // –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
          response_format: { type: "json_object" },
          temperature: 1
        });
  
        const result = response.choices[0]?.message?.content;
        if (!result) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ 1');
  
        const parsedResult = JSON.parse(result);
        const processingTime = Date.now() - startTime;
        const cost = this.calculateCost(MODELS.GPT5_MINI, response.usage);
  
        const charCount = parsedResult.finalCharacteristics?.length || 0;
        console.log(`‚úÖ –ê–≥–µ–Ω—Ç 1: ${charCount} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫${hasReference ? ' (—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞)' : ' (–∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)'}`);
  
        return {
          success: true,
          data: parsedResult,
          confidence: parsedResult.confidence || (hasReference ? 0.95 : 0.85),
          tokensUsed: response.usage?.total_tokens || 0,
          cost,
          processingTime
        };
  
      } catch (error) {
        console.warn(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
        if (attempt < QUALITY_REQUIREMENTS.MAX_RETRIES) {
          await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
        }
      }
    }
  
    return {
      success: false,
      data: { finalCharacteristics: [], confidence: 0 },
      confidence: 0,
      tokensUsed: 0,
      cost: 0,
      processingTime: Date.now() - startTime,
      error: '–ê–≥–µ–Ω—Ç 1 –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ'
    };
  }

  /**
   * –ê–ì–ï–ù–¢ 2 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
   */
  private async runAgent2_Characteristics(
    input: ProductInput, 
    agent1Data: any, 
    characteristics: CategoryCharacteristic[]
  ): Promise<AgentResult> {
    const startTime = Date.now();
    let lastError: Error | null = null;
    
    for (let attempt = 1; attempt <= QUALITY_REQUIREMENTS.MAX_RETRIES; attempt++) {
      try {
        console.log(`üìä –ê–ì–ï–ù–¢ 2: –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${QUALITY_REQUIREMENTS.MAX_RETRIES}`);
        console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${input.categoryId}`);
        
        const prompt = this.createAgent2Prompt(input, agent1Data, characteristics);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 180000);
        
        const response = await this.openai.chat.completions.create({
          model: MODELS.GPT5_MINI,
          messages: [{ role: 'user', content: prompt }],
          max_completion_tokens: 8000, // –£–º–µ–Ω—å—à–µ–Ω–æ
          response_format: { type: "json_object" }
        }, {
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        const result = response.choices[0]?.message?.content;
        if (!result) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ 2');

        const parsedResult = JSON.parse(result);
        const processingTime = Date.now() - startTime;
        const cost = this.calculateCost(MODELS.GPT5_MINI, response.usage);

        console.log(`‚úÖ –ê–≥–µ–Ω—Ç 2 –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}: ${parsedResult.characteristics?.length || 0} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`);

        return {
          success: true,
          data: parsedResult,
          confidence: parsedResult.confidence || 0.85,
          tokensUsed: response.usage?.total_tokens || 0,
          cost,
          processingTime
        };

      } catch (error) {
        lastError = error as Error;
        console.warn(`‚ùå –û—à–∏–±–∫–∞ –ê–≥–µ–Ω—Ç–∞ 2 –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, error);
        
        if (attempt < QUALITY_REQUIREMENTS.MAX_RETRIES) {
          const waitTime = Math.min(2000 * attempt, 10000);
          await new Promise(resolve => setTimeout(resolve, waitTime));
        }
      }
    }

    return {
      success: false,
      data: null,
      confidence: 0,
      tokensUsed: 0,
      cost: 0,
      processingTime: Date.now() - startTime,
      error: `–ê–≥–µ–Ω—Ç 2 failed: ${lastError?.message || 'Unknown error'}`
    };
  }

  /**
   * –ê–ì–ï–ù–¢ 3 —Å –∫—Ä–∞—Ç–∫–∏–º SEO
   */
  private async runAgent3_SEO(
    input: ProductInput,
    agent1Data: any, 
    agent2Data: any
  ): Promise<AgentResult> {
    const startTime = Date.now();
    let lastError: Error | null = null;
    
    for (let attempt = 1; attempt <= QUALITY_REQUIREMENTS.MAX_RETRIES; attempt++) {
      try {
        console.log(`‚úçÔ∏è –ê–ì–ï–ù–¢ 3: –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${QUALITY_REQUIREMENTS.MAX_RETRIES}`);
        
        const prompt = this.createAgent3Prompt(input, agent1Data, agent2Data);
        
        const controller = new AbortController();
        const timeout = 120000; // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è SEO
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        
        const response = await this.openai.chat.completions.create({
          model: MODELS.GPT5_MINI,
          messages: [{ role: 'user', content: prompt }],
          max_completion_tokens: 3000, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è SEO
          response_format: { type: "json_object" }
        }, {
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        const result = response.choices[0]?.message?.content;
        if (!result) {
          throw new Error(`–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ê–≥–µ–Ω—Ç–∞ 3`);
        }

        let parsedResult;
        try {
          parsedResult = JSON.parse(result);
        } catch (parseError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:`, parseError);
          console.error(`üìÑ –û—Ç–≤–µ—Ç:`, result);
          throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç –ê–≥–µ–Ω—Ç–∞ 3: ${parseError}`);
        }
        
        const processingTime = Date.now() - startTime;
        const cost = this.calculateCost(MODELS.GPT5_MINI, response.usage);

        console.log(`‚úÖ –ê–≥–µ–Ω—Ç 3 –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}: SEO –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω`);

        return {
          success: true,
          data: parsedResult,
          confidence: parsedResult.confidence || 0.92,
          tokensUsed: response.usage?.total_tokens || 0,
          cost,
          processingTime
        };

      } catch (error) {
        lastError = error as Error;
        const isTimeout = error instanceof Error && 
          (error.message.includes('aborted') || error.message.includes('timeout'));
        
        if (isTimeout) {
          console.warn(`‚è∞ –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
        } else {
          console.warn(`‚ùå –û—à–∏–±–∫–∞ –ê–≥–µ–Ω—Ç–∞ 3 –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, error);
        }
        
        if (attempt < QUALITY_REQUIREMENTS.MAX_RETRIES) {
          const waitTime = Math.min(2000 * attempt, 15000);
          await new Promise(resolve => setTimeout(resolve, waitTime));
        }
      }
    }

    return {
      success: false,
      data: null,
      confidence: 0,
      tokensUsed: 0,
      cost: 0,
      processingTime: Date.now() - startTime,
      error: `–ê–≥–µ–Ω—Ç 3 failed: ${lastError?.message || 'Unknown error'}`
    };
  }

  /**
   * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
   */
  async analyzeProductComplete(input: ProductInput): Promise<FinalResult> {
    const startTime = Date.now();
    console.log(`\nüöÄ –ó–ê–ü–£–°–ö 3-–ê–ì–ï–ù–¢–ù–û–ô –°–ò–°–¢–ï–ú–´: "${input.productName}"`);

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ü–†–ê–í–ò–õ–¨–ù–û–ô –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID: ${input.categoryId}`);
      const categoryCharacteristics = await this.loadCategoryCharacteristics(input.categoryId);
      const filteredChars = this.filterCharacteristicsForAI(categoryCharacteristics);
      
      console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${input.categoryId}: ${categoryCharacteristics.length} ‚Üí ${filteredChars.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –ò–ò`);

      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤
      const agent1Result = await this.runAgent1_Research(input);
      
      if (!agent1Result.success) {
        console.warn(`‚ö†Ô∏è –ê–≥–µ–Ω—Ç 1 –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
        agent1Result.data = {
          productAnalysis: {
            confirmedName: input.productName,
            detectedBrand: "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            category: "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
          },
          technicalSpecs: { confirmed: [], probable: [] },
          confidence: 0.5
        };
      }

      const agent2Result = await this.runAgent2_Characteristics(input, agent1Result.data, filteredChars);
      
      if (!agent2Result.success) {
        console.warn(`‚ö†Ô∏è –ê–≥–µ–Ω—Ç 2 –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏`);
        agent2Result.data = {
          characteristics: [],
          fillStatistics: {
            totalFilled: 0,
            totalAvailable: filteredChars.length,
            fillRate: 0
          },
          confidence: 0.3
        };
      }

      const agent3Result = await this.runAgent3_SEO(input, agent1Result.data, agent2Result.data);
      
      if (!agent3Result.success) {
        console.warn(`‚ö†Ô∏è –ê–≥–µ–Ω—Ç 3 –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π SEO`);
        agent3Result.data = {
          seoTitle: input.productName.substring(0, 60),
          seoDescription: `${input.productName}. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ.`,
          confidence: 0.4
        };
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –í–°–ï —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ù–ï —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)
      const finalResult = this.mergeFinalResults(
        agent1Result,
        agent2Result, 
        agent3Result,
        categoryCharacteristics, // –ü–µ—Ä–µ–¥–∞–µ–º –í–°–ï 42 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –≤–∫–ª—é—á–∞—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ
        startTime
      );

      const hasFailures = !agent1Result.success || !agent2Result.success || !agent3Result.success;
      const statusMessage = hasFailures ? '–ß–ê–°–¢–ò–ß–ù–û –ó–ê–í–ï–†–®–ï–ù–ê' : '–ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê';

      console.log(`\n‚úÖ –°–ò–°–¢–ï–ú–ê ${statusMessage}:`);
      console.log(`   –í—Ä–µ–º—è: ${finalResult.analysisReport.totalProcessingTime}ms`);
      console.log(`   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${finalResult.analysisReport.totalCost.toFixed(4)}`);
      console.log(`   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${finalResult.qualityMetrics.fillRate}%`);

      return finalResult;

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
      
      return {
        characteristics: [],
        seoTitle: input.productName.substring(0, 60),
        seoDescription: `${input.productName}. –û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ.`,
        qualityMetrics: {
          overallScore: 0,
          fillRate: 0,
          characteristicsFillRate: 0,
          seoDescriptionLength: 0,
          seoTitleLength: 0,
          isQualityAcceptable: false,
          issues: ['–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
          suggestions: ['–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ']
        },
        analysisReport: {
          totalProcessingTime: Date.now() - startTime,
          totalCost: 0,
          agent1Time: 0,
          agent2Time: 0,
          agent3Time: 0,
          improvementAttempts: 0,
          finalScore: 0
        },
        confidence: 0.1,
        fillPercentage: 0,
        warnings: [`–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`],
        recommendations: ['–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É']
      };
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
   */
  private async prepareMessagesWithImages(prompt: string, images: string[]): Promise<any[]> {
    if (images && images.length > 0) {
      return [{
        role: 'user',
        content: [
          { type: 'text', text: prompt },
          ...images.map(img => ({
            type: 'image_url',
            image_url: { url: img }
          }))
        ]
      }];
    }
    
    return [{ role: 'user', content: prompt }];
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ wbCharacteristicId (–Ω–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º ID)
   */
  private filterCharacteristicsForAI(characteristics: CategoryCharacteristic[]): CategoryCharacteristic[] {
    const EXCLUDED_WB_IDS = new Set([
      // –ì–∞–±–∞—Ä–∏—Ç—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π)
      89008, 90630, 90607, 90608, 90652, 90653, 11002, 90654, 90655, 90673,
      // –¶–≤–µ—Ç (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
      14177449,
      // –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è (–∑–∞—â–∏—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
      14177441, 378533,
      // –ù–î–°/–¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ (–∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
      14177472, 14177473, 14177474, 15001405, 15001135, 15001136, 15001137, 15001138,
      // –ò–ö–ü–£ –∏ –∫–æ–¥—ã
      15001650, 15001706
    ]);

    const filtered = characteristics.filter(char => {
      const isExcluded = EXCLUDED_WB_IDS.has(char.wbCharacteristicId || 0);
      
      if (isExcluded) {
        console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω–∞: ${char.name} (wbCharacteristicId: ${char.wbCharacteristicId})`);
      }
      
      return !isExcluded;
    });

    console.log(`üìã –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: ${characteristics.length} ‚Üí ${filtered.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    console.log(`üìù –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ò–ò:`, 
      filtered.slice(0, 5).map(c => `${c.name} (${c.wbCharacteristicId})`).join(', ')
    );
    
    return filtered;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
   */
  private async loadCategoryCharacteristics(subcategoryId: number): Promise<CategoryCharacteristic[]> {
    try {
      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è subcategoryId: ${subcategoryId}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const characteristics = await prisma.wbCategoryCharacteristic.findMany({
        where: {
          subcategoryId: subcategoryId
        },
        include: {
          values: {
            where: { isActive: true },
            orderBy: { sortOrder: 'asc' }
          }
        },
        orderBy: [{ isRequired: 'desc' }, { sortOrder: 'asc' }]
      });

      if (characteristics.length === 0) {
        console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è subcategoryId: ${subcategoryId}`);
        return [];
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${characteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è subcategoryId: ${subcategoryId}`);

      return characteristics.map((char: any) => ({
        id: char.id,
        wbCharacteristicId: char.wbCharacteristicId,
        name: char.name,
        type: char.type === 'number' ? 'number' : 'string',
        isRequired: !!char.isRequired,
        maxLength: char.maxLength,
        minValue: char.minValue,
        maxValue: char.maxValue,
        description: char.description,
        values: char.values?.map((v: any) => ({
          id: v.id,
          value: v.value,
          displayName: v.displayName || v.value
        })) || []
      }));

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:', error);
      throw error;
    }
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
   */
  private mergeFinalResults(
    agent1: AgentResult,
    agent2: AgentResult, 
    agent3: AgentResult,
    characteristics: CategoryCharacteristic[],
    startTime: number
  ): FinalResult {
    const totalTime = Date.now() - startTime;
    const totalCost = agent1.cost + agent2.cost + agent3.cost;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    const processedCharacteristics = (agent2.data.characteristics || []).map((char: any) => {
      const dbChar = characteristics.find(c => c.id === char.id);
      const detectedType = dbChar?.type || 'string';
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
      let typedValue = char.value;
      if (detectedType === 'number' && typedValue) {
        const num = parseFloat(String(typedValue).replace(/[^\d.,]/g, '').replace(',', '.'));
        typedValue = isNaN(num) ? char.value : num;
      }
      
      return {
        id: char.id,
        name: char.name,
        value: typedValue,
        confidence: char.confidence || 0,
        reasoning: char.source || 'ai_analysis', // –£–±—Ä–∞–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ reasoning
        detectedType,
        source: char.source || 'ai_analysis'
      };
    });
    
    // –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    const fillRate = Math.round((processedCharacteristics.length / characteristics.length) * 100);
    const seoTitleLength = (agent3.data.seoTitle || '').length;
    const seoDescriptionLength = (agent3.data.seoDescription || '').length;

    return {
      characteristics: processedCharacteristics,
      seoTitle: this.truncateTitle(agent3.data.seoTitle || '', QUALITY_REQUIREMENTS.SEO_TITLE_MAX_LENGTH),
      seoDescription: agent3.data.seoDescription || '',
      
      qualityMetrics: {
        overallScore: this.calculateOverallScore(fillRate, seoDescriptionLength, seoTitleLength),
        fillRate,
        characteristicsFillRate: fillRate,
        seoDescriptionLength,
        seoTitleLength,
        isQualityAcceptable: fillRate >= 60,
        issues: [],
        suggestions: []
      },
      
      analysisReport: {
        totalProcessingTime: totalTime,
        totalCost,
        agent1Time: agent1.processingTime,
        agent2Time: agent2.processingTime,
        agent3Time: agent3.processingTime,
        improvementAttempts: 1,
        finalScore: this.calculateOverallScore(fillRate, seoDescriptionLength, seoTitleLength)
      },
      
      confidence: (agent1.confidence + agent2.confidence + agent3.confidence) / 3,
      fillPercentage: fillRate,
      warnings: [],
      recommendations: [
        `–ó–∞–ø–æ–ª–Ω–µ–Ω–æ ${processedCharacteristics.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`,
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏'
      ]
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  private calculateOverallScore(fillRate: number, descLength: number, titleLength: number): number {
    let score = 0;
    
    // –ë–∞–ª–ª –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (50 –±–∞–ª–ª–æ–≤)
    score += Math.min(50, (fillRate / 60) * 50);
    
    // –ë–∞–ª–ª –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ (30 –±–∞–ª–ª–æ–≤)
    if (descLength >= QUALITY_REQUIREMENTS.SEO_DESCRIPTION_MIN_LENGTH && 
        descLength <= QUALITY_REQUIREMENTS.SEO_DESCRIPTION_MAX_LENGTH) {
      score += 30;
    } else {
      const optimal = (QUALITY_REQUIREMENTS.SEO_DESCRIPTION_MIN_LENGTH + QUALITY_REQUIREMENTS.SEO_DESCRIPTION_MAX_LENGTH) / 2;
      const deviation = Math.abs(descLength - optimal);
      score += Math.max(0, 30 - (deviation / 50));
    }
    
    // –ë–∞–ª–ª –∑–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ (20 –±–∞–ª–ª–æ–≤)
    if (titleLength <= QUALITY_REQUIREMENTS.SEO_TITLE_MAX_LENGTH) {
      score += Math.max(0, 20 - (QUALITY_REQUIREMENTS.SEO_TITLE_MAX_LENGTH - titleLength) * 0.5);
    }
    
    return Math.round(score);
  }

  /**
   * –û–±—Ä–µ–∑–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
   */
  private truncateTitle(title: string, maxLength: number): string {
    if (title.length <= maxLength) return title;
    
    const words = title.split(' ');
    let truncated = '';
    
    for (const word of words) {
      if ((truncated + ' ' + word).trim().length <= maxLength) {
        truncated = (truncated + ' ' + word).trim();
      } else {
        break;
      }
    }
    
    return truncated || title.substring(0, maxLength - 3) + '...';
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
   */
  private calculateCost(model: string, usage: any): number {
    if (!usage) return 0;
    
    const pricing = PRICING[model as keyof typeof PRICING];
    if (!pricing) return 0;
    
    const inputCost = (usage.prompt_tokens / 1000000) * pricing.input;
    const outputCost = (usage.completion_tokens / 1000000) * pricing.output;
    
    return inputCost + outputCost;
  }
}

export const unifiedAISystem = new UnifiedAISystem();