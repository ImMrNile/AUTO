// lib/auth/session-cache.ts - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î

interface CachedSession {
  user: any;
  expiresAt: Date;
  cachedAt: Date;
}

class SessionCache {
  private cache = new Map<string, CachedSession>();
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  set(token: string, user: any, sessionExpiresAt: Date): void {
    this.cache.set(token, {
      user,
      expiresAt: sessionExpiresAt,
      cachedAt: new Date()
    });
    
    console.log(`üóÑÔ∏è [SessionCache] –ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token.substring(0, 10)}...`);
  }

  get(token: string): any | null {
    const cached = this.cache.get(token);
    if (!cached) {
      return null;
    }

    const now = new Date();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–µ—à
    if (now.getTime() - cached.cachedAt.getTime() > this.CACHE_TTL) {
      console.log(`‚è∞ [SessionCache] –ö–µ—à –∏—Å—Ç–µ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token.substring(0, 10)}...`);
      this.cache.delete(token);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–∞–º–∞ —Å–µ—Å—Å–∏—è
    if (cached.expiresAt < now) {
      console.log(`üï∞Ô∏è [SessionCache] –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token.substring(0, 10)}...`);
      this.cache.delete(token);
      return null;
    }

    console.log(`‚úÖ [SessionCache] –ö–µ—à –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token.substring(0, 10)}...`);
    return cached.user;
  }

  delete(token: string): void {
    this.cache.delete(token);
    console.log(`üóëÔ∏è [SessionCache] –ö–µ—à —É–¥–∞–ª–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token.substring(0, 10)}...`);
  }

  clear(): void {
    this.cache.clear();
    console.log(`üßπ [SessionCache] –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω`);
  }

  size(): number {
    return this.cache.size;
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
  cleanup(): void {
    const now = new Date();
    let cleaned = 0;
    
    for (const [token, cached] of this.cache.entries()) {
      if (now.getTime() - cached.cachedAt.getTime() > this.CACHE_TTL || 
          cached.expiresAt < now) {
        this.cache.delete(token);
        cleaned++;
      }
    }
    
    if (cleaned > 0) {
      console.log(`üßπ [SessionCache] –û—á–∏—â–µ–Ω–æ ${cleaned} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–µ—à–∞
export const sessionCache = new SessionCache();

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
if (typeof window === 'undefined') { // –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  setInterval(() => {
    sessionCache.cleanup();
  }, 10 * 60 * 1000);
}




