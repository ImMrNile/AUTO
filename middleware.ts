// middleware.ts - MIDDLEWARE –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò CORS –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò

import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// –ü—Ä–æ—Å—Ç–æ–π in-memory rate limiter
const rateLimitMap = new Map<string, { count: number; resetTime: number }>()
const RATE_LIMIT_WINDOW = 60 * 1000 // 1 –º–∏–Ω—É—Ç–∞
const MAX_REQUESTS_PER_WINDOW = 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl
  
  // –ó–∞—â–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ API endpoints
  if (pathname.startsWith('/api/')) {
    const ip = request.ip || request.headers.get('x-forwarded-for') || 'unknown'
    const now = Date.now()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    const rateLimit = rateLimitMap.get(ip)
    if (rateLimit) {
      if (now > rateLimit.resetTime) {
        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
        rateLimitMap.set(ip, { count: 1, resetTime: now + RATE_LIMIT_WINDOW })
      } else if (rateLimit.count >= MAX_REQUESTS_PER_WINDOW) {
        // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        return NextResponse.json(
          { error: 'Rate limit exceeded. Please try again later.' },
          { status: 429 }
        )
      } else {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        rateLimit.count++
      }
    } else {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
      rateLimitMap.set(ip, { count: 1, resetTime: now + RATE_LIMIT_WINDOW })
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    if (rateLimitMap.size > 1000) {
      const oldKeys = Array.from(rateLimitMap.keys()).slice(0, 200)
      oldKeys.forEach(key => rateLimitMap.delete(key))
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints
    if (pathname.startsWith('/api/products/') || 
        pathname.startsWith('/api/cabinets') ||
        pathname.startsWith('/api/categories')) {
      
      const sessionToken = request.cookies.get('session_token')?.value
      if (!sessionToken) {
        return NextResponse.json(
          { error: 'Unauthorized. Please log in.' },
          { status: 401 }
        )
      }
    }
  }
  
  return NextResponse.next()
}

export const config = {
  matcher: [
    '/api/:path*',
  ],
}
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å middleware

export class MiddlewareUtils {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
   */
  static isValidJWT(token: string): boolean {
    try {
      const parts = token.split('.');
      if (parts.length !== 3) return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π base64
      parts.forEach(part => {
        const decoded = atob(part.replace(/-/g, '+').replace(/_/g, '/'));
        JSON.parse(decoded);
      });
      
      return true;
    } catch {
      return false;
    }
  }
  
  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
   */
  static getClientIP(request: NextRequest): string {
    return (
      request.ip ||
      request.headers.get('x-forwarded-for') ||
      request.headers.get('x-real-ip') ||
      request.headers.get('cf-connecting-ip') ||
      'unknown'
    );
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –±–æ—Ç–∞
   */
  static isBot(request: NextRequest): boolean {
    const userAgent = request.headers.get('user-agent')?.toLowerCase() || '';
    const botPatterns = [
      'googlebot',
      'bingbot',
      'slurp',
      'duckduckbot',
      'baiduspider',
      'yandexbot',
      'facebookexternalhit',
      'twitterbot',
      'whatsapp',
      'telegram'
    ];
    
    return botPatterns.some(pattern => userAgent.includes(pattern));
  }
  
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  static logRequest(request: NextRequest, responseTime?: number): void {
    if (process.env.NODE_ENV === 'development') {
      const method = request.method;
      const url = request.url;
      const ip = this.getClientIP(request);
      const userAgent = request.headers.get('user-agent') || 'Unknown';
      const time = responseTime ? ` (${responseTime}ms)` : '';
      
      console.log(`[${new Date().toISOString()}] ${method} ${url} - IP: ${ip}${time}`);
      
      if (this.isBot(request)) {
        console.log(`  ü§ñ Bot detected: ${userAgent}`);
      }
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  static createCacheHeaders(maxAge: number = 3600, staleWhileRevalidate: number = 86400): Record<string, string> {
    return {
      'Cache-Control': `public, max-age=${maxAge}, s-maxage=${maxAge}, stale-while-revalidate=${staleWhileRevalidate}`,
      'Vary': 'Accept-Encoding'
    };
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  static createNoCacheHeaders(): Record<string, string> {
    return {
      'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0',
      'Pragma': 'no-cache',
      'Expires': '0',
      'Surrogate-Control': 'no-store'
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
export { CORS_CONFIG, RATE_LIMIT_CONFIG };
