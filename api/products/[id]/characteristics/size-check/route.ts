// src/app/api/categories/[id]/characteristics/size-check/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { prisma, safePrismaOperation } from '../../../../../../../lib/prisma';

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ä–∞–∑–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const categoryId = parseInt(params.id);
    
    if (isNaN(categoryId)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      }, { status: 400 });
    }

    console.log(`üîç [Size Check API] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);

    // –ò—â–µ–º —Ä–∞–∑–º–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const sizeCharacteristics = await safePrismaOperation(
      () => prisma.wbCategoryCharacteristic.findMany({
        where: {
          subcategoryId: categoryId,
          OR: [
            // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
            { name: { contains: '–†–∞–∑–º–µ—Ä', mode: 'insensitive' } },
            { name: { contains: 'Size', mode: 'insensitive' } },
            { name: { contains: '—Ä–∞–∑–º–µ—Ä', mode: 'insensitive' } },
            { name: { contains: '–†–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞', mode: 'insensitive' } },
            { name: { contains: '–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥', mode: 'insensitive' } },
            { name: { contains: '–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å', mode: 'insensitive' } },
            { name: { contains: '—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å', mode: 'insensitive' } },
            { name: { contains: '–ì–∞–±–∞—Ä–∏—Ç', mode: 'insensitive' } },
            { name: { contains: '–≥–∞–±–∞—Ä–∏—Ç', mode: 'insensitive' } },
            
            // –ü–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º WB ID —Ä–∞–∑–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ Wildberries
            { wbCharacteristicId: { in: [
              1, 2, 3, 4, 5, 6, 7, 8, 9, 10, // –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
              134, 135, 136, 137, 138, 139, 140, // –†–∞–∑–º–µ—Ä—ã –æ–¥–µ–∂–¥—ã
              285, 286, 287, 288, 289, 290, // –†–∞–∑–º–µ—Ä—ã –æ–±—É–≤–∏
              341, 342, 343, 344, 345, // –†–∞–∑–º–µ—Ä—ã –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
              567, 568, 569, 570, // –†–∞–∑–º–µ—Ä—ã –¥–µ—Ç—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
              789, 790, 791, 792, // –†–∞–∑–º–µ—Ä—ã —Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤
              1023, 1024, 1025, 1026 // –†–∞–∑–º–µ—Ä—ã —Ç–µ—Ö–Ω–∏–∫–∏/—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
            ]}},
            
            // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            { description: { contains: '—Ä–∞–∑–º–µ—Ä', mode: 'insensitive' } },
            { description: { contains: 'size', mode: 'insensitive' } }
          ]
        },
        select: {
          id: true,
          name: true,
          wbCharacteristicId: true,
          description: true,
          type: true,
          isRequired: true,
          values: {
            where: { isActive: true },
            select: {
              id: true,
              value: true,
              displayName: true
            },
            orderBy: { sortOrder: 'asc' }
          }
        },
        orderBy: [
          { isRequired: 'desc' },
          { name: 'asc' }
        ]
      }),
      '–ø–æ–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫'
    );

    const hasSizeCharacteristics = sizeCharacteristics.length > 0;
    
    console.log(`üìã [Size Check API] –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${sizeCharacteristics.length}`);

    if (sizeCharacteristics.length > 0) {
      console.log(`üìù [Size Check API] –†–∞–∑–º–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:`, 
        sizeCharacteristics.map(c => `"${c.name}" (ID: ${c.wbCharacteristicId})`)
      );
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const possibleSizes = new Set<string>();
    
    sizeCharacteristics.forEach(char => {
      if (char.values && char.values.length > 0) {
        char.values.forEach(value => {
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä
          const sizeValue = value.displayName || value.value;
          if (sizeValue && typeof sizeValue === 'string' && sizeValue.trim()) {
            possibleSizes.add(sizeValue.trim());
          }
        });
      }
    });

    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const standardSizesByCategory = getStandardSizesByCategory(categoryId);
    if (possibleSizes.size === 0 && hasSizeCharacteristics) {
      standardSizesByCategory.forEach(size => possibleSizes.add(size));
    }

    const sizeCharacteristicsArray = Array.from(possibleSizes).sort();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const categoryInfo = await safePrismaOperation(
      () => prisma.wbSubcategory.findUnique({
        where: { id: categoryId },
        select: {
          id: true,
          name: true,
          slug: true,
          parentCategory: {
            select: {
              id: true,
              name: true,
              slug: true
            }
          }
        }
      }),
      '–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
    );

    const result = {
      success: true,
      categoryId: categoryId,
      categoryName: categoryInfo?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
      parentCategoryName: categoryInfo?.parentCategory?.name || null,
      hasSizeCharacteristics: hasSizeCharacteristics,
      sizeCharacteristicsCount: sizeCharacteristics.length,
      sizeCharacteristics: sizeCharacteristicsArray,
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
      detailedCharacteristics: sizeCharacteristics.map(char => ({
        id: char.id,
        wbCharacteristicId: char.wbCharacteristicId,
        name: char.name,
        type: char.type,
        isRequired: char.isRequired,
        valuesCount: char.values?.length || 0,
        sampleValues: char.values?.slice(0, 3).map(v => v.displayName || v.value) || []
      })),
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è UI
      recommendations: {
        showSizeSelector: hasSizeCharacteristics,
        defaultSizes: sizeCharacteristicsArray.slice(0, 10), // –ü–µ—Ä–≤—ã–µ 10 —Ä–∞–∑–º–µ—Ä–æ–≤
        categoryType: hasSizeCharacteristics ? 'sized' : 'sizeless',
        message: hasSizeCharacteristics 
          ? `–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryInfo?.name}" –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã.`
          : `–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryInfo?.name}" –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤. –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –±–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π.`
      },
      
      timestamp: new Date().toISOString()
    };

    console.log(`‚úÖ [Size Check API] –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, {
      hasSizes: result.hasSizeCharacteristics,
      sizesCount: result.sizeCharacteristics.length,
      categoryType: result.recommendations.categoryType
    });

    return NextResponse.json(result);

  } catch (error) {
    console.error(`‚ùå [Size Check API] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${params.id}:`, error);
    
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      categoryId: parseInt(params.id) || null,
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

// POST –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const categoryId = parseInt(params.id);
    
    if (isNaN(categoryId)) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      }, { status: 400 });
    }

    const body = await request.json();
    const { forceRefresh = false, addStandardSizes = false } = body;

    console.log(`üîÑ [Size Check API] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);

    if (addStandardSizes) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      const standardSizes = getStandardSizesByCategory(categoryId);
      
      if (standardSizes.length > 0) {
        console.log(`‚ûï [Size Check API] –î–æ–±–∞–≤–ª—è–µ–º ${standardSizes.length} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤`);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –ë–î
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –º–æ–≥–ª–æ –±—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ
        
        return NextResponse.json({
          success: true,
          message: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${standardSizes.length} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏`,
          categoryId: categoryId,
          addedSizes: standardSizes,
          timestamp: new Date().toISOString()
        });
      }
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return NextResponse.redirect(request.url.replace('/size-check', '/size-check'), 302);

  } catch (error) {
    console.error(`‚ùå [Size Check API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:`, error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
 */
function getStandardSizesByCategory(categoryId: number): string[] {
  // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ë–î –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
  const categoryStandardSizes: Record<number, string[]> = {
    // –û–¥–µ–∂–¥–∞ –º—É–∂—Å–∫–∞—è
    291: ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL'],
    292: ['42', '44', '46', '48', '50', '52', '54', '56', '58', '60'],
    
    // –û–¥–µ–∂–¥–∞ –∂–µ–Ω—Å–∫–∞—è
    306: ['XS', 'S', 'M', 'L', 'XL', 'XXL'],
    307: ['40', '42', '44', '46', '48', '50', '52', '54'],
    
    // –û–±—É–≤—å –º—É–∂—Å–∫–∞—è
    629: ['39', '40', '41', '42', '43', '44', '45', '46', '47'],
    
    // –û–±—É–≤—å –∂–µ–Ω—Å–∫–∞—è  
    657: ['35', '36', '37', '38', '39', '40', '41', '42'],
    
    // –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
    515: ['80', '86', '92', '98', '104', '110', '116', '122', '128', '134', '140'],
    
    // –î–µ—Ç—Å–∫–∞—è –æ–±—É–≤—å
    563: ['18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35'],
    
    // –ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã
    594: ['54', '55', '56', '57', '58', '59', '60', '61'],
    
    // –ü–µ—Ä—á–∞—Ç–∫–∏
    595: ['XS', 'S', 'M', 'L', 'XL'],
    
    // –ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ –º—É–∂—Å–∫–æ–µ
    593: ['S', 'M', 'L', 'XL', 'XXL'],
    
    // –ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ –∂–µ–Ω—Å–∫–æ–µ
    559: ['70A', '70B', '70C', '70D', '75A', '75B', '75C', '75D', '80A', '80B', '80C', '80D']
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (categoryStandardSizes[categoryId]) {
    return categoryStandardSizes[categoryId];
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
  // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±–µ–∑—Ä–∞–∑–º–µ—Ä–Ω–∞—è
  return [];
}