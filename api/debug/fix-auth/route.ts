// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π

import { NextRequest, NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { prisma } from '../../../../../lib/prisma';
import { AuthService } from '../../../../../lib/auth/auth-service';

export async function POST(request: NextRequest) {
  try {
    console.log('üîß [Fix Auth] === –ù–ê–ß–ê–õ–û FIX AUTH ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    console.log('üîß [Fix Auth] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...');
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      await prisma.$connect();
      console.log('‚úÖ [Fix Auth] Prisma connected successfully');
      
      // –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      await prisma.$queryRaw`SELECT 1 as test`;
      console.log('‚úÖ [Fix Auth] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
    } catch (dbError) {
      console.error('‚ùå [Fix Auth] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', dbError);
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        details: dbError instanceof Error ? dbError.message : 'Unknown error'
      }, { status: 500 });
    }
    
    const cookieStore = cookies();
    const currentToken = cookieStore.get('session_token')?.value;
    
    console.log('üîß [Fix Auth] –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏:', currentToken ? `${currentToken.substring(0, 10)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏—è—Ö
    const allSessions = await prisma.session.findMany({
      select: { 
        id: true, 
        token: true, 
        userId: true, 
        expiresAt: true,
        createdAt: true,
        user: {
          select: {
            email: true,
            name: true,
            isActive: true
          }
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    });
    
    console.log('üîß [Fix Auth] –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π –≤ –ë–î:', allSessions.length);
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        isActive: true,
        lastLoginAt: true
      },
      orderBy: { lastLoginAt: 'desc' },
      take: 5
    });
    
    console.log('üîß [Fix Auth] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î:', allUsers.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –≤ –ë–î
    let currentSession = null;
    if (currentToken) {
      currentSession = await prisma.session.findUnique({
        where: { token: currentToken },
        include: { user: true }
      });
      console.log('üîß [Fix Auth] –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –≤ –ë–î:', currentSession ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    const activeUser = allUsers.find(user => user.isActive);
    console.log('üîß [Fix Auth] –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', activeUser?.email);
    
    if (!activeUser) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ',
        diagnostics: {
          totalUsers: allUsers.length,
          totalSessions: allSessions.length,
          currentToken: currentToken ? `${currentToken.substring(0, 10)}...` : null,
          currentSessionExists: !!currentSession
        }
      }, { status: 404 });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîß [Fix Auth] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', activeUser.email);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.session.deleteMany({
      where: { userId: activeUser.id }
    });
    
    const newToken = generateToken();
    const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π
    
    const newSession = await prisma.session.create({
      data: {
        userId: activeUser.id,
        token: newToken,
        expiresAt,
        ipAddress: request.headers.get('x-forwarded-for') || 'fix-auth',
        userAgent: request.headers.get('user-agent') || 'auth-fix-tool'
      }
    });
    
    console.log('‚úÖ [Fix Auth] –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', newToken.substring(0, 10) + '...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await prisma.user.update({
      where: { id: activeUser.id },
      data: { lastLoginAt: new Date() }
    });
    
    const response = NextResponse.json({
      success: true,
      message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞',
      user: {
        id: activeUser.id,
        email: activeUser.email,
        name: activeUser.name,
        role: activeUser.role
      },
      diagnostics: {
        totalUsers: allUsers.length,
        totalSessions: allSessions.length,
        oldToken: currentToken ? `${currentToken.substring(0, 10)}...` : null,
        newToken: `${newToken.substring(0, 10)}...`,
        currentSessionExists: !!currentSession,
        deletedOldSessions: true
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π cookie
    response.cookies.set('session_token', newToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
      path: '/',
      sameSite: 'lax'
    });
    
    console.log('‚úÖ [Fix Auth] Cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    
    return response;
    
  } catch (error) {
    console.error('‚ùå [Fix Auth] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
function generateToken(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let token = '';
  for (let i = 0; i < 64; i++) {
    token += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return token;
}

export async function GET() {
  try {
    console.log('üîß [Fix Auth] === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê AUTH ===');
    
    const cookieStore = cookies();
    const currentToken = cookieStore.get('session_token')?.value;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await prisma.$connect();
    await prisma.$queryRaw`SELECT 1 as test`;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏—è—Ö
    const allSessions = await prisma.session.findMany({
      select: { 
        id: true, 
        token: true, 
        userId: true, 
        expiresAt: true,
        createdAt: true,
        user: {
          select: {
            email: true,
            name: true,
            isActive: true
          }
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    });
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        isActive: true,
        lastLoginAt: true
      },
      orderBy: { lastLoginAt: 'desc' },
      take: 5
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    let currentSession = null;
    if (currentToken) {
      currentSession = await prisma.session.findUnique({
        where: { token: currentToken },
        include: { user: true }
      });
    }
    
    return NextResponse.json({
      success: true,
      diagnostics: {
        databaseConnected: true,
        currentToken: currentToken ? `${currentToken.substring(0, 10)}...` : null,
        currentSessionExists: !!currentSession,
        currentSessionExpired: currentSession ? currentSession.expiresAt < new Date() : null,
        totalUsers: allUsers.length,
        activeUsers: allUsers.filter(u => u.isActive).length,
        totalSessions: allSessions.length,
        activeSessions: allSessions.filter(s => s.expiresAt > new Date()).length,
        users: allUsers.map(u => ({
          email: u.email,
          name: u.name,
          role: u.role,
          isActive: u.isActive,
          lastLoginAt: u.lastLoginAt
        })),
        sessions: allSessions.map(s => ({
          tokenPreview: `${s.token.substring(0, 10)}...`,
          userEmail: s.user.email,
          expiresAt: s.expiresAt,
          isExpired: s.expiresAt < new Date(),
          createdAt: s.createdAt
        }))
      }
    });
    
  } catch (error) {
    console.error('‚ùå [Fix Auth] –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}
