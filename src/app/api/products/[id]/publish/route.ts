// src/app/api/products/[id]/publish/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–´–ú API URL –ò –¢–ê–ô–ú–ê–£–¢–ê–ú–ò
import { NextRequest, NextResponse } from 'next/server';
import { prisma, safePrismaOperation } from '@/lib/prisma';
import { AuthService } from '@/lib/auth/auth-service';
import { WB_API_CONFIG } from '@/lib/config/wbApiConfig';

// POST –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log(`üöÄ [Publish] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ —Å ID: ${params.id}`);

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = null;
    try {
      user = await AuthService.getCurrentUser();
    } catch (authError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authError);
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        details: authError instanceof Error ? authError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 401 });
    }
    
    if (!user) {
      return NextResponse.json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const requestBody = await request.json();
    const {
      characteristics = [],
      seoTitle = '',
      seoDescription = '',
      finalStatus = 'READY' // READY –∏–ª–∏ PUBLISHED
    } = requestBody;

    console.log(`üì• [Publish] –ü–æ–ª—É—á–µ–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
    console.log(`   - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${characteristics.length}`);
    console.log(`   - SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${seoTitle}"`);
    console.log(`   - SEO –æ–ø–∏—Å–∞–Ω–∏–µ: ${seoDescription.substring(0, 100)}...`);
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${finalStatus}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const product = await safePrismaOperation(
      () => prisma.product.findUnique({
        where: { id: params.id },
        select: {
          id: true,
          name: true,
          price: true,
          status: true,
          subcategoryId: true,
          dimensions: true,
          originalImage: true,
          userId: true,
          productCabinets: {
            where: { isSelected: true },
            select: {
              cabinetId: true,
              cabinet: {
                select: {
                  id: true,
                  name: true,
                  apiToken: true,
                  isActive: true
                }
              }
            }
          }
        }
      }),
      '–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
    );

    if (!product) {
      return NextResponse.json({ 
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (product.userId !== user.id) {
      return NextResponse.json({ 
        error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞' 
      }, { status: 403 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!seoTitle || !seoDescription) {
      return NextResponse.json({ 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ' 
      }, { status: 400 });
    }

    if (characteristics.length === 0) {
      return NextResponse.json({ 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞' 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    if (!product.productCabinets || product.productCabinets.length === 0) {
      return NextResponse.json({ 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏' 
      }, { status: 400 });
    }

    const selectedCabinet = product.productCabinets[0];
    const cabinet = selectedCabinet.cabinet;

    if (!cabinet || !cabinet.isActive) {
      return NextResponse.json({ 
        error: '–ö–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' 
      }, { status: 400 });
    }

    if (!cabinet.apiToken) {
      return NextResponse.json({ 
        error: '–£ –∫–∞–±–∏–Ω–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API —Ç–æ–∫–µ–Ω –¥–ª—è Wildberries' 
      }, { status: 400 });
    }

    // –≠–¢–ê–ü 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    console.log('üíæ [Publish] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
    
    const finalAiCharacteristics = JSON.stringify({
      characteristics: characteristics,
      seoTitle: seoTitle,
      seoDescription: seoDescription,
      qualityMetrics: {
        characteristicsFillRate: Math.round((characteristics.filter((c: any) => {
          if (c.value == null || c.value === '') return false;
          if (typeof c.value === 'string') {
            return c.value.trim() !== '';
          }
          if (typeof c.value === 'number') {
            return !Number.isNaN(c.value);
          }
          return false;
        }).length / characteristics.length) * 100),
        seoDescriptionLength: seoDescription.length,
        seoTitleLength: seoTitle.length,
        isQualityAcceptable: true,
        overallScore: 95
      },
      systemVersion: 'user_confirmed_v1',
      processedAt: new Date().toISOString(),
      userConfirmedAt: new Date().toISOString(),
      source: 'user_final_confirmation'
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const updatedProduct = await safePrismaOperation(
      () => prisma.product.update({
        where: { id: params.id },
        data: {
          generatedName: seoTitle,
          seoDescription: seoDescription,
          aiCharacteristics: finalAiCharacteristics,
          status: finalStatus,
          updatedAt: new Date()
        }
      }),
      '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    );

    if (!updatedProduct) {
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î' 
      }, { status: 500 });
    }

    console.log('‚úÖ [Publish] –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');

    // –≠–¢–ê–ü 2: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ Wildberries (–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å PUBLISHED)
    if (finalStatus === 'PUBLISHED') {
      console.log('üìã [WB Publish] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Wildberries...');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º vendorCode –∏ barcode –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ç–æ–≤–∞—Ä–∞
      const vendorCode = `PRD${product.id.slice(-8).toUpperCase()}`;
      const barcode = `2200000${product.id.slice(-6)}${Math.floor(Math.random() * 10)}`;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      const brandChar = characteristics.find((char: any) => 
        char.name && (
          char.name.toLowerCase().includes('–±—Ä–µ–Ω–¥') ||
          char.name.toLowerCase().includes('brand') ||
          char.name.toLowerCase().includes('–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å')
        )
      );
      const brand = brandChar?.value || 'Generic';

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Wildberries API
      const wbProductData = {
        vendorCode: vendorCode,
        title: seoTitle,
        description: seoDescription, 
        brand: brand,
        subjectID: product.subcategoryId,
        characteristics: characteristics.map((char: any) => ({
          id: char.id,
          value: char.value
        })).filter((char: any) => {
          if (char.value == null || char.value === '') return false;
          // Handle both string and number values
          if (typeof char.value === 'string') {
            return char.value.trim() !== '';
          }
          if (typeof char.value === 'number') {
            return !Number.isNaN(char.value);
          }
          return false;
        }),
        sizes: [{
          skus: [barcode],
          price: Math.round(product.price * 100), // –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
          discountedPrice: Math.round(product.price * 100), // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–¥–∫—É
          wbSize: "0"
        }]
      };

      console.log('üì§ [WB Publish] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Wildberries API...');
      console.log('üîç [WB Publish] –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:', JSON.stringify(wbProductData, null, 2));

      try {
        console.log('üì§ [WB API] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Wildberries API...');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 60000); // –£–≤–µ–ª–∏—á–µ–Ω –¥–æ 60 —Å–µ–∫—É–Ω–¥
        
        const wbApiResponse = await fetch(`${WB_API_CONFIG.BASE_URLS.CONTENT}/content/v2/cards/upload`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': cabinet.apiToken,
            'User-Agent': 'WB-AI-Assistant/2.0',
            'Accept': 'application/json'
          },
          body: JSON.stringify([wbProductData]), // WB API –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        console.log(`üìä [WB API] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${wbApiResponse.status}`);
        
        if (!wbApiResponse.ok) {
          const errorText = await wbApiResponse.text();
          console.error(`‚ùå [WB API] –û—à–∏–±–∫–∞ ${wbApiResponse.status}:`, errorText);
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ WB
          let errorMessage = '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Wildberries';
          let parsedError = null;
          
          try {
            parsedError = JSON.parse(errorText);
          } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ');
          }
          
          if (wbApiResponse.status === 401) {
            errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω –¥–ª—è Wildberries. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–∞.';
          } else if (wbApiResponse.status === 400) {
            if (parsedError?.errors) {
              errorMessage = `–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞: ${JSON.stringify(parsedError.errors)}`;
            } else {
              errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è Wildberries. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.';
            }
          } else if (wbApiResponse.status === 403) {
            errorMessage = '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.';
          } else if (wbApiResponse.status === 429) {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Wildberries. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
          await safePrismaOperation(
            () => prisma.product.update({
              where: { id: params.id },
              data: {
                errorMessage: errorMessage,
                wbData: JSON.stringify({
                  error: errorMessage,
                  errorDetails: parsedError || errorText,
                  errorAt: new Date().toISOString(),
                  cabinet: cabinet.name,
                  vendorCode: vendorCode,
                  barcode: barcode,
                  productData: wbProductData,
                  apiStatus: 'failed'
                })
              }
            }),
            '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ WB API'
          );
          
          return NextResponse.json({ 
            error: errorMessage,
            details: parsedError || errorText,
            wbStatus: wbApiResponse.status,
            productSaved: true // –î–∞–Ω–Ω—ã–µ –≤ –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
          }, { status: 400 });
        }
        
        const wbResponseData = await wbApiResponse.json();
        console.log('‚úÖ [WB API] –û—Ç–≤–µ—Ç –æ—Ç Wildberries:', JSON.stringify(wbResponseData, null, 2));
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ taskId
        let wbProductId = null;
        let wbTaskId = null;
        
        if (wbResponseData) {
          // WB API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å taskId –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          if (wbResponseData.taskId) {
            wbTaskId = wbResponseData.taskId;
            console.log(`üìã [WB API] –ü–æ–ª—É—á–µ–Ω taskId: ${wbTaskId}`);
          }
          
          // –ò–ª–∏ —Å—Ä–∞–∑—É ID —Ç–æ–≤–∞—Ä–∞
          if (wbResponseData.data && Array.isArray(wbResponseData.data) && wbResponseData.data.length > 0) {
            const firstItem = wbResponseData.data[0];
            wbProductId = firstItem.nmID || firstItem.nmId || firstItem.id;
            console.log(`üì¶ [WB API] –ü–æ–ª—É—á–µ–Ω ID —Ç–æ–≤–∞—Ä–∞: ${wbProductId}`);
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        await safePrismaOperation(
          () => prisma.product.update({
            where: { id: params.id },
            data: {
              publishedAt: new Date(),
              status: 'PUBLISHED',
              errorMessage: null,
              wbData: JSON.stringify({
                wbProductId: wbProductId,
                wbTaskId: wbTaskId,
                wbResponse: wbResponseData,
                publishedAt: new Date().toISOString(),
                cabinet: cabinet.name,
                vendorCode: vendorCode,
                barcode: barcode,
                productData: wbProductData,
                apiStatus: 'published'
              })
            }
          }),
          '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö WB –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
        );
      
        console.log('‚úÖ [WB API] –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Wildberries');
      
        return NextResponse.json({
          success: true,
          message: '–¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Wildberries',
          productId: params.id,
          status: 'PUBLISHED',
          wbPublished: true,
          wbProductId: wbProductId,
          wbTaskId: wbTaskId,
          publishedAt: new Date().toISOString(),
          cabinet: cabinet.name,
          vendorCode: vendorCode,
          barcode: barcode
        });
      
      } catch (wbError) {
        console.error('‚ùå [WB API] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Wildberries:', wbError);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries API';
        let isNetworkError = false;
        let isTimeoutError = false;
        let shouldRetry = false;
        
        if (wbError instanceof Error) {
          if (wbError.name === 'AbortError') {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Wildberries API (60 —Å–µ–∫—É–Ω–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            isTimeoutError = true;
            shouldRetry = true;
          } else if (wbError.message.includes('fetch failed')) {
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
            isNetworkError = true;
            shouldRetry = true;
          } else if (wbError.message.includes('ENOTFOUND')) {
            errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä Wildberries API. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å DNS –∏–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.';
            isNetworkError = true;
            shouldRetry = true;
          } else if (wbError.message.includes('ECONNREFUSED')) {
            errorMessage = '–°–µ—Ä–≤–µ—Ä Wildberries API –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
            isNetworkError = true;
            shouldRetry = true;
          } else if (wbError.message.includes('TIMEOUT') || wbError.message.includes('timeout')) {
            errorMessage = '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            isTimeoutError = true;
            shouldRetry = true;
          } else {
            errorMessage = wbError.message;
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await safePrismaOperation(
          () => prisma.product.update({
            where: { id: params.id },
            data: {
              errorMessage: errorMessage,
              wbData: JSON.stringify({
                error: errorMessage,
                errorType: isTimeoutError ? 'timeout' : isNetworkError ? 'network' : 'api',
                shouldRetry: shouldRetry,
                errorAt: new Date().toISOString(),
                cabinet: cabinet.name,
                vendorCode: vendorCode,
                barcode: barcode,
                productData: wbProductData,
                apiStatus: 'failed',
                apiUrl: `${WB_API_CONFIG.BASE_URLS.CONTENT}/content/v2/cards/upload`
              })
            }
          }),
          '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ WB API'
        );
        
        return NextResponse.json({ 
          error: errorMessage,
          errorType: isTimeoutError ? 'timeout' : isNetworkError ? 'network' : 'api',
          shouldRetry: shouldRetry,
          details: wbError instanceof Error ? wbError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          productSaved: true, // –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Ç–æ–ª—å–∫–æ WB –Ω–µ —É–¥–∞–ª–æ—Å—å
          message: shouldRetry 
            ? '–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.'
            : '–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ WB –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–∞.'
        }, { status: 500 });
      }
    } else {
      // –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ WB
      return NextResponse.json({
        success: true,
        message: '–î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.',
        productId: params.id,
        status: finalStatus,
        wbPublished: false,
        savedAt: new Date().toISOString()
      });
    }

  } catch (error: any) {
    console.error('‚ùå [Publish] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    
    return NextResponse.json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
      details: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}