// src/app/api/products/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø

import { NextResponse } from 'next/server';
import { prisma, safePrismaOperation } from '@/lib/prisma';
import { uploadService } from '@/lib/services/uploadService';
import { AuthService } from '@/lib/auth/auth-service';
import { unifiedAISystem } from '@/lib/services/unifiedAISystem';

export async function POST(request: NextResponse) {
  const startTime = Date.now();
  let productId: string | undefined = undefined;
  
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ò–ò');

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const user = await AuthService.getCurrentUser();
    if (!user) {
      return NextResponse.json({ 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ FormData
    const formData = await request.formData();
    
    const productData = {
      name: (formData.get('name') as string) || '',
      originalPrice: (formData.get('originalPrice') as string) || '',
      discountPrice: (formData.get('discountPrice') as string) || '',
      costPrice: (formData.get('costPrice') as string) || '',
      packageContents: (formData.get('packageContents') as string) || '',
      dimensions: (() => {
        try {
          const dimensions = formData.get('dimensions');
          return dimensions ? JSON.parse(dimensions as string) : { length: 25, width: 20, height: 10, weight: 0.3 };
        } catch {
          return { length: 25, width: 20, height: 10, weight: 0.3 };
        }
      })(),
      referenceUrl: (formData.get('referenceUrl') as string) || '',
      cabinetId: (formData.get('cabinetId') as string) || '',
      vendorCode: (formData.get('vendorCode') as string) || '',
      barcode: (formData.get('barcode') as string) || '',
      hasVariantSizes: formData.get('hasVariantSizes') === 'true',
      variantSizes: (() => {
        try {
          const variantSizesData = formData.get('variantSizes');
          return variantSizesData ? JSON.parse(variantSizesData as string) : [];
        } catch {
          return [];
        }
      })(),
      description: (formData.get('description') as string) || '',
      mainImage: formData.get('image') as File || null,
      imageComments: (formData.get('imageComments') as string) || '',
      categoryId: (formData.get('categoryId') as string) || '',
      categoryName: (formData.get('categoryName') as string) || '',
      parentCategoryName: (formData.get('parentCategoryName') as string) || '',
      additionalImagesCount: parseInt((formData.get('additionalImagesCount') as string) || '0'),
    };

    console.log(`üì¶ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞: "${productData.name}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${productData.categoryName}`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const validationErrors = [];
    if (!productData.name.trim()) validationErrors.push('–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
    if (!productData.originalPrice.trim()) validationErrors.push('–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞');
    if (!productData.discountPrice.trim()) validationErrors.push('—Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π');
    if (!productData.packageContents.trim()) validationErrors.push('–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è');
    if (!productData.categoryId.trim()) validationErrors.push('–∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    
    if (validationErrors.length > 0) {
      return NextResponse.json({ 
        error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${validationErrors.join(', ')}`
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cabinets = await safePrismaOperation(
      () => prisma.cabinet.findMany({
        where: { userId: user.id, isActive: true }
      }),
      '–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤'
    );

    if (cabinets.length === 0) {
      return NextResponse.json({ 
        error: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤'
      }, { status: 400 });
    }
    
    // –ê–≤—Ç–æ–≤—ã–±–æ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!productData.cabinetId) {
      productData.cabinetId = cabinets[0].id;
      console.log(`–ê–≤—Ç–æ–≤—ã–±—Ä–∞–Ω –∫–∞–±–∏–Ω–µ—Ç: ${cabinets[0].name}`);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let mainImageUrl = null;
    if (productData.mainImage) {
      try {
        mainImageUrl = await uploadService.uploadFile(productData.mainImage);
        console.log('‚úÖ –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
      } catch (imageError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageError);
        return NextResponse.json({ 
          error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
        }, { status: 500 });
      }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const additionalImageUrls: string[] = [];
    for (let i = 0; i < productData.additionalImagesCount; i++) {
      const additionalImage = formData.get(`additionalImage${i}`) as File;
      if (additionalImage) {
        try {
          const additionalImageUrl = await uploadService.uploadFile(additionalImage);
          additionalImageUrls.push(additionalImageUrl);
        } catch (imageError) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, imageError);
        }
      }
    }

    console.log(`üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –æ—Å–Ω–æ–≤–Ω–æ–µ + ${additionalImageUrls.length} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö`);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const product = await safePrismaOperation(
      () => prisma.product.create({
        data: {
          name: productData.name,
          price: parseFloat(productData.discountPrice),
          status: 'DRAFT',
          originalImage: mainImageUrl,
          referenceUrl: productData.referenceUrl || null,
          dimensions: {
            length: productData.dimensions.length,
            width: productData.dimensions.width,
            height: productData.dimensions.height,
            weight: productData.dimensions.weight * 1000 // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥—Ä–∞–º–º—ã
          },
          workflowId: `unified-ai-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          processingMethod: 'unified_ai_system_v3_gpt5',
          wbData: {
            vendorCode: productData.vendorCode,
            barcode: productData.barcode,
            packageContents: productData.packageContents,
            hasVariantSizes: productData.hasVariantSizes,
            variantSizes: productData.variantSizes,
            description: productData.description,
            imageComments: productData.imageComments,
            originalPrice: parseFloat(productData.originalPrice),
            discountPrice: parseFloat(productData.discountPrice),
            costPrice: productData.costPrice ? parseFloat(productData.costPrice) : null,
            categoryId: parseInt(productData.categoryId),
            categoryName: productData.categoryName,
            parentCategoryName: productData.parentCategoryName
          },
          userId: user.id,
          subcategoryId: parseInt(productData.categoryId)
        }
      }),
      '—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î'
    );
    
    productId = product.id;
    console.log(`‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω –≤ –ë–î —Å ID: ${productId}`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º
    await safePrismaOperation(
      () => prisma.productCabinet.create({
        data: {
          productId: product.id,
          cabinetId: productData.cabinetId,
          isSelected: true
        }
      }),
      '—Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º'
    );

    console.log('‚úÖ –°–≤—è–∑—å —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∞');

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    const aiInput = {
      productName: productData.name,
      productImages: [mainImageUrl, ...additionalImageUrls].filter((url): url is string => url !== null),
      categoryId: parseInt(productData.categoryId),
      packageContents: productData.packageContents,
      referenceUrl: productData.referenceUrl,
      price: parseFloat(productData.discountPrice),
      dimensions: productData.dimensions,
      hasVariantSizes: productData.hasVariantSizes,
      variantSizes: productData.variantSizes,
      aiPromptComment: productData.imageComments,
      preserveUserData: {
        preserveUserData: true,
        userProvidedPackageContents: productData.packageContents,
        userProvidedDimensions: productData.dimensions,
        specialInstructions: `–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: "${productData.packageContents}"`
      }
    };

    // üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò–ò –∞–Ω–∞–ª–∏–∑ –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    let aiResult = null;
    let aiAnalysisStatus = 'failed';
    
    try {
      console.log('ü§ñ –ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ò–ò –∞–Ω–∞–ª–∏–∑–∞ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π)...');
      
      aiResult = await unifiedAISystem.analyzeProductComplete(aiInput);
      
      aiAnalysisStatus = 'completed';
      
      console.log('‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (–¥–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î)');
      console.log(`üìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
      console.log(`   - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${aiResult.qualityMetrics.characteristicsFillRate}%`);
      console.log(`   - –û–ø–∏—Å–∞–Ω–∏–µ: ${aiResult.qualityMetrics.seoDescriptionLength} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${aiResult.qualityMetrics.seoTitleLength} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   - –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–ª–µ–º–æ: ${aiResult.qualityMetrics.isQualityAcceptable ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`   - –û–±—â–∏–π –±–∞–ª–ª: ${aiResult.analysisReport.finalScore}/100`);
      console.log(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${aiResult.analysisReport.totalProcessingTime}–º—Å`);
      console.log(`   - –°—Ç–æ–∏–º–æ—Å—Ç—å: $${aiResult.analysisReport.totalCost.toFixed(4)}`);
      console.log(`   ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);
      
    } catch (aiError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ò–ò:', aiError);
      aiAnalysisStatus = 'failed';
    }

    // üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ò–ò –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    console.log('‚ö†Ô∏è –ò–ò –¥–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    const totalProcessingTime = Date.now() - startTime;
    console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${totalProcessingTime}–º—Å`);

    // üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ò–ò –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const responseData: any = {
      success: true,
      message: aiAnalysisStatus === 'completed' 
        ? '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"'
        : '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω. –ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—Ä—É—á–Ω—É—é',
      productId,
      processingTime: totalProcessingTime,
      
      // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
      data: {
        name: productData.name,
        vendorCode: productData.vendorCode,
        barcode: productData.barcode,
        packageContents: productData.packageContents,
        price: {
          original: parseFloat(productData.originalPrice),
          discount: parseFloat(productData.discountPrice),
          cost: productData.costPrice ? parseFloat(productData.costPrice) : null
        },
        category: {
          id: parseInt(productData.categoryId),
          name: productData.categoryName,
          parentName: productData.parentCategoryName
        },
        images: {
          main: mainImageUrl,
          additional: additionalImageUrls
        },
        dimensions: productData.dimensions,
        hasVariantSizes: productData.hasVariantSizes,
        variantSizes: productData.variantSizes,
        status: 'DRAFT' // –í—Å–µ–≥–¥–∞ DRAFT –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      },
      
      // üî• –ò–ò –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î)
      aiPreview: aiResult ? {
        characteristics: aiResult.characteristics || [],
        seoTitle: aiResult.seoTitle || productData.name,
        seoDescription: aiResult.seoDescription || '',
        qualityMetrics: aiResult.qualityMetrics,
        analysisReport: aiResult.analysisReport,
        confidence: aiResult.confidence,
        warnings: aiResult.warnings || [],
        recommendations: aiResult.recommendations || [],
        systemVersion: 'unified_ai_v3_gpt5',
        processedAt: new Date().toISOString()
      } : null,

      // ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ—Ä–æ–Ω—Ç–æ–º: –æ—Ç–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω–∏ —É–∂–µ –≤ –ë–î
      // –ù–∏–∫–∞–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
      aiCharacteristics: aiResult ? {
        characteristics: aiResult.characteristics || [],
        qualityScore: aiResult.qualityMetrics?.overallScore,
        confidence: aiResult.confidence,
        warnings: aiResult.warnings || [],
        recommendations: aiResult.recommendations || [],
        analysisReport: aiResult.analysisReport,
        qualityMetrics: aiResult.qualityMetrics,
        systemVersion: 'unified_ai_preview',
        processedAt: new Date().toISOString()
      } : null,

      // –î—É–±–ª–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
      characteristics: aiResult?.characteristics || [],
      generatedName: aiResult?.seoTitle || productData.name,
      seoDescription: aiResult?.seoDescription || '',
      
      // –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
      aiAnalysisStatus,
      needsUserConfirmation: true // –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    };

    // üî• –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    if (aiResult) {
      responseData.systemInfo = {
        version: 'unified_ai_system_v3_gpt5',
        workflow: 'preview_first', // –ù–æ–≤—ã–π workflow - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, –ø–æ—Ç–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        agents: [
          'GPT-5-mini Research Agent',
          'GPT-5-mini Characteristics Agent', 
          'GPT-5-mini/GPT-5 SEO Agent (Smart Fallback)'
        ],
        performance: {
          totalCharacteristics: aiResult.characteristics.length,
          filledCharacteristics: aiResult.characteristics.filter((c: any) => c.value && String(c.value).trim() !== '').length,
          processingTime: aiResult.analysisReport.totalProcessingTime,
          totalCost: aiResult.analysisReport.totalCost,
          confidence: aiResult.confidence
        }
      };
    }

    return NextResponse.json(responseData);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API:', error);
    
    const totalProcessingTime = Date.now() - startTime;

    // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    let errorDetails = '';
    let suggestion = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É';
    let errorCategory = 'unknown';
    
    if (error instanceof Error) {
      if (error.message.includes('P1001') || error.message.includes('database server')) {
        errorMessage = '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö';
        errorCategory = 'database';
        suggestion = '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
      } else if (error.message.includes('timeout') || error.message.includes('connection')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º';
        errorCategory = 'network';
        suggestion = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
      } else if (error.message.includes('–ö–∞—Ç–µ–≥–æ—Ä–∏—è') || error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) {
        errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        errorCategory = 'category';
        suggestion = '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É';
      } else if (error.message.includes('OPENAI_API_KEY')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ò–ò';
        errorCategory = 'ai_config';
        suggestion = '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
      } else {
        errorDetails = error.message;
        errorCategory = 'application';
      }
    }

    return NextResponse.json({
      success: false,
      error: errorMessage,
      errorCategory,
      details: errorDetails,
      suggestion,
      processingTime: totalProcessingTime,
      productId: productId || null,
      systemUsed: 'unified_ai_system_v3_gpt5',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}