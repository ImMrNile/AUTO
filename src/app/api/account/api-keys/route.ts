// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../../lib/prisma';
import { AuthService } from '../../../../../lib/auth/auth-service';

// GET - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET() {
  try {
    console.log('üîë [API Keys] === –ù–ê–ß–ê–õ–û GET /api/account/api-keys ===');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await prisma.$connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await AuthService.getCurrentUser();
    
    if (!user) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const apiKeys = await prisma.apiKey.findMany({
      where: { userId: user.id },
      orderBy: { createdAt: 'desc' },
      select: {
        id: true,
        name: true,
        key: true,
        isActive: true,
        lastUsedAt: true,
        createdAt: true
      }
    });

    console.log('‚úÖ [API Keys] –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π:', apiKeys.length);

    return NextResponse.json({
      success: true,
      apiKeys: apiKeys.map(key => ({
        ...key,
        key: maskApiKey(key.key) // –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      }))
    });

  } catch (error) {
    console.error('‚ùå [API Keys] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ API –∫–ª—é—á–µ–π:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ API –∫–ª—é—á–µ–π',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// POST - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á
export async function POST(request: NextRequest) {
  try {
    console.log('üîë [API Keys] === –ù–ê–ß–ê–õ–û POST /api/account/api-keys ===');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await prisma.$connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await AuthService.getCurrentUser();
    
    if (!user) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const body = await request.json();
    const { name } = body;

    if (!name || typeof name !== 'string' || name.trim().length === 0) {
      return NextResponse.json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π (–ª–∏–º–∏—Ç)
    const existingKeysCount = await prisma.apiKey.count({
      where: { userId: user.id }
    });

    if (existingKeysCount >= 10) {
      return NextResponse.json({
        success: false,
        error: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç API –∫–ª—é—á–µ–π (10)'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    const existingKey = await prisma.apiKey.findFirst({
      where: { 
        userId: user.id,
        name: name.trim()
      }
    });

    if (existingKey) {
      return NextResponse.json({
        success: false,
        error: 'API –∫–ª—é—á —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      }, { status: 400 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API –∫–ª—é—á
    const apiKey = generateApiKey();

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π API –∫–ª—é—á –≤ –ë–î
    const newApiKey = await prisma.apiKey.create({
      data: {
        userId: user.id,
        name: name.trim(),
        key: apiKey,
        isActive: true,
        permissions: {}
      }
    });

    console.log('‚úÖ [API Keys] –ù–æ–≤—ã–π API –∫–ª—é—á —Å–æ–∑–¥–∞–Ω:', {
      id: newApiKey.id,
      name: newApiKey.name,
      userId: newApiKey.userId
    });

    return NextResponse.json({
      success: true,
      apiKey: {
        id: newApiKey.id,
        name: newApiKey.name,
        key: apiKey, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–ª—é—á —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        isActive: newApiKey.isActive,
        createdAt: newApiKey.createdAt
      },
      message: 'API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.'
    });

  } catch (error) {
    console.error('‚ùå [API Keys] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –∫–ª—é—á–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –∫–ª—é—á–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// DELETE - —É–¥–∞–ª–∏—Ç—å API –∫–ª—é—á
export async function DELETE(request: NextRequest) {
  try {
    console.log('üîë [API Keys] === –ù–ê–ß–ê–õ–û DELETE /api/account/api-keys ===');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await prisma.$connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await AuthService.getCurrentUser();
    
    if (!user) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const keyId = searchParams.get('id');

    if (!keyId) {
      return NextResponse.json({
        success: false,
        error: 'ID API –∫–ª—é—á–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const apiKey = await prisma.apiKey.findFirst({
      where: { 
        id: keyId,
        userId: user.id
      }
    });

    if (!apiKey) {
      return NextResponse.json({
        success: false,
        error: 'API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –£–¥–∞–ª—è–µ–º API –∫–ª—é—á
    await prisma.apiKey.delete({
      where: { id: keyId }
    });

    console.log('‚úÖ [API Keys] API –∫–ª—é—á —É–¥–∞–ª–µ–Ω:', {
      id: apiKey.id,
      name: apiKey.name
    });

    return NextResponse.json({
      success: true,
      message: 'API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå [API Keys] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–∞
function generateApiKey(): string {
  const prefix = 'wb_';
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let key = prefix;
  
  for (let i = 0; i < 32; i++) {
    key += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  
  return key;
}

// –§—É–Ω–∫—Ü–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ API –∫–ª—é—á–∞
function maskApiKey(key: string): string {
  if (!key) return '***';
  if (key.length <= 8) return '*'.repeat(key.length);
  
  const prefix = key.startsWith('wb_') ? 'wb_' : key.substring(0, 3);
  const suffix = key.substring(key.length - 4);
  const middle = '*'.repeat(Math.max(key.length - prefix.length - 4, 8));
  
  return prefix + middle + suffix;
}
