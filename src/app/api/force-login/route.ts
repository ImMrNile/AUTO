// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';

export async function POST(request: NextRequest) {
  console.log('üöÄ [Force Login] === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–•–û–î ===');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await prisma.$connect();
    console.log('‚úÖ [Force Login] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
    
    // –ù–∞—Ö–æ–¥–∏–º –ª—é–±–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findFirst({
      where: { isActive: true },
      orderBy: { lastLoginAt: 'desc' }
    });
    
    if (!user) {
      return NextResponse.json({
        success: false,
        error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ'
      }, { status: 404 });
    }
    
    console.log('üë§ [Force Login] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.email);
    
    // –£–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
    console.log('üßπ [Force Login] –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏...');
    await prisma.session.deleteMany({});
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω
    const newToken = generateSimpleToken();
    const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    console.log('üîë [Force Login] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é...');
    const session = await prisma.session.create({
      data: {
        userId: user.id,
        token: newToken,
        expiresAt,
        ipAddress: request.headers.get('x-forwarded-for') || 'force-login',
        userAgent: request.headers.get('user-agent') || 'force-login-tool'
      }
    });
    
    console.log('‚úÖ [Force Login] –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', newToken.substring(0, 10) + '...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await prisma.user.update({
      where: { id: user.id },
      data: { lastLoginAt: new Date() }
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    const response = NextResponse.json({
      success: true,
      message: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role
      },
      session: {
        token: newToken.substring(0, 10) + '...',
        expiresAt: expiresAt.toISOString()
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
    response.cookies.set('session_token', newToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
      path: '/',
      sameSite: 'lax'
    });
    
    console.log('‚úÖ [Force Login] Cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω');
    return response;
    
  } catch (error) {
    console.error('‚ùå [Force Login] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –≤—Ö–æ–¥–µ',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
function generateSimpleToken(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let token = '';
  for (let i = 0; i < 64; i++) {
    token += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return token;
}

export async function GET() {
  return NextResponse.json({
    message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞',
    endpoint: '/api/force-login',
    method: 'POST'
  });
}
