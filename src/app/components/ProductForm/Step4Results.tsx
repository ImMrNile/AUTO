// src/components/ProductForm/Step4Results.tsx - –ü–û–õ–ù–´–ô –ö–û–î

import React, { useState, useEffect } from 'react';
import { 
  Edit3, 
  Sparkles, 
  Zap, 
  RotateCcw, 
  CheckCircle, 
  AlertCircle, 
  Loader,
  Wrench,
  Lock,
  FileText,
  Palette,
  Save,
  X,
  Upload,
  Eye,
  ExternalLink,
  AlertTriangle,
  Lightbulb,
  Plus,
  Trash2,
  Settings,
  Database,
  Globe
} from 'lucide-react';

interface AICharacteristic {
  id: number;
  name: string;
  value: any;
  confidence: number;
  reasoning: string;
  type: 'string' | 'number';
  isRequired?: boolean;
  isFilled?: boolean;
  category?: 'ai_filled' | 'manual_required' | 'user_protected' | 'declaration';
  possibleValues?: Array<{
    id: number;
    value: string;
    displayName?: string;
  }>;
  maxLength?: number;
  minValue?: number;
  maxValue?: number;
  description?: string;
  source?: string;
  isEditable?: boolean;
}

interface Step4ResultsProps {
  createdProductId: string | null;
  aiResponse: any;
  aiCharacteristics: AICharacteristic[];
  allCategoryCharacteristics: any[];
  isLoadingCharacteristics: boolean;
  editingCharacteristics: {[key: number]: boolean};
  onUpdateProductField: (field: string, value: string) => void;
  onUpdateCharacteristic: (characteristicId: number, newValue: any) => void;
  onDeleteCharacteristic: (characteristicId: number) => void;
  onAddNewCharacteristic: (characteristicId: number, value: any) => void;
  onToggleEditCharacteristic: (characteristicId: number) => void;
  onPublish: () => void;
  onSaveOnly: () => void;
  onCreateInfographic: () => void;
  onClearForm: () => void;
  onLoadProductCharacteristics: (productId: string) => void;
  onLoadAllCategoryCharacteristics?: (categoryId: number) => void;
  onCharacteristicUpdate?: (characteristicId: number, newValue: string) => void;
  hasPendingData?: boolean;
  isPublished?: boolean;
  isPublishing?: boolean;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
const CharacteristicItem = ({ 
  characteristic, 
  isEditing, 
  onEdit, 
  onSave, 
  onCancel 
}: {
  characteristic: AICharacteristic;
  isEditing: boolean;
  onEdit: () => void;
  onSave: (value: string) => void;
  onCancel: () => void;
}) => {
  const [editValue, setEditValue] = useState(String(characteristic.value || ''));

  const getCategoryIcon = () => {
    if (characteristic.category === 'declaration') {
      return <FileText className="w-4 h-4 text-orange-400" />;
    } else if (characteristic.category === 'manual_required') {
      return <Wrench className="w-4 h-4 text-yellow-400" />;
    } else if (characteristic.category === 'user_protected') {
      return <Lock className="w-4 h-4 text-blue-400" />;
    } else if (characteristic.isFilled) {
      return <CheckCircle className="w-4 h-4 text-green-400" />;
    } else {
      return <AlertCircle className="w-4 h-4 text-gray-400" />;
    }
  };

  const getCategoryColor = () => {
    if (characteristic.category === 'declaration') {
      return 'border-orange-500/30 bg-orange-900/10';
    } else if (characteristic.category === 'manual_required') {
      return 'border-yellow-500/30 bg-yellow-900/10';
    } else if (characteristic.category === 'user_protected') {
      return 'border-blue-500/30 bg-blue-900/10';
    } else if (characteristic.isFilled) {
      return 'border-green-500/30 bg-green-900/10';
    } else {
      return 'border-gray-500/20 bg-gray-900/10';
    }
  };

  const getCategoryLabel = () => {
    if (characteristic.category === 'declaration') {
      return '–î–µ–∫–ª–∞—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è';
    } else if (characteristic.category === 'manual_required') {
      return '–¢—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞';
    } else if (characteristic.category === 'user_protected') {
      return '–°–∏—Å—Ç–µ–º–Ω–∞—è';
    } else if (characteristic.isFilled) {
      return '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ò–ò';
    } else {
      return '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ';
    }
  };

  return (
    <div className={`p-4 rounded-lg border ${getCategoryColor()} bg-black/30 hover:border-blue-500/30 transition-colors`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2 flex-wrap">
            {getCategoryIcon()}
            <span className="font-medium text-white text-sm">{characteristic.name}</span>
            
            <span className={`px-2 py-0.5 rounded text-xs ${
              characteristic.category === 'declaration'
                ? 'bg-orange-900/30 text-orange-300'
                : characteristic.category === 'manual_required'
                ? 'bg-yellow-900/30 text-yellow-300'
                : characteristic.category === 'user_protected'
                ? 'bg-blue-900/30 text-blue-300'
                : characteristic.isFilled 
                ? 'bg-green-900/30 text-green-300' 
                : 'bg-gray-900/30 text-gray-300'
            }`}>
              {getCategoryLabel()}
            </span>
            
            {characteristic.isRequired && (
              <span className="px-1.5 py-0.5 bg-red-900/30 text-red-300 text-xs rounded">
                –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è
              </span>
            )}
          </div>

          {isEditing ? (
            <div className="space-y-2">
              {characteristic.possibleValues && characteristic.possibleValues.length > 0 ? (
                <select
                  value={editValue}
                  onChange={(e) => setEditValue(e.target.value)}
                  className="w-full px-3 py-2 bg-black/40 border border-blue-500/30 rounded text-white text-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ</option>
                  {characteristic.possibleValues.map((option) => (
                    <option key={option.id} value={option.value}>
                      {option.displayName || option.value}
                    </option>
                  ))}
                </select>
              ) : characteristic.type === 'number' ? (
                <input
                  type="number"
                  value={editValue}
                  onChange={(e) => setEditValue(e.target.value)}
                  min={characteristic.minValue}
                  max={characteristic.maxValue}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
                  className="w-full px-3 py-2 bg-black/40 border border-blue-500/30 rounded text-white text-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400"
                />
              ) : (
                <input
                  type="text"
                  value={editValue}
                  onChange={(e) => setEditValue(e.target.value)}
                  maxLength={characteristic.maxLength}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                  className="w-full px-3 py-2 bg-black/40 border border-blue-500/30 rounded text-white text-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400"
                />
              )}
              
              {characteristic.description && (
                <p className="text-xs text-gray-400">{characteristic.description}</p>
              )}
              
              <div className="flex gap-2">
                <button
                  onClick={() => onSave(editValue)}
                  className="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-xs flex items-center gap-1 transition-colors"
                >
                  <Save className="w-3 h-3" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button
                  onClick={onCancel}
                  className="px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white rounded text-xs flex items-center gap-1 transition-colors"
                >
                  <X className="w-3 h-3" />
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          ) : (
            <div className="space-y-2">
              <div className="text-white text-sm min-h-[20px]">
                {characteristic.value ? (
                  <span className={`font-medium ${
                    characteristic.category === 'user_protected' ? 'text-blue-200' : 'text-white'
                  }`}>
                    {characteristic.value}
                  </span>
                ) : (
                  <div className="space-y-1">
                    <span className="text-gray-400 italic">
                      {characteristic.category === 'manual_required' 
                        ? '–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ - –Ω–∞–∂–º–∏—Ç–µ ‚úèÔ∏è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
                        : characteristic.category === 'user_protected'
                        ? '–°–∏—Å—Ç–µ–º–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ - –Ω–∞–∂–º–∏—Ç–µ ‚úèÔ∏è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
                        : '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ò–ò - –Ω–∞–∂–º–∏—Ç–µ ‚úèÔ∏è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è'
                      }
                    </span>
                    {characteristic.description && (
                      <div className="text-xs text-gray-500 mt-1">
                        üí° {characteristic.description}
                      </div>
                    )}
                  </div>
                )}
              </div>
              
              {characteristic.isFilled && characteristic.confidence > 0 && (
                <div className="flex items-center gap-2">
                  <div className="text-xs text-gray-400">
                    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò: {Math.round(characteristic.confidence * 100)}%
                  </div>
                  {characteristic.confidence < 0.7 && (
                    <div className="text-xs text-yellow-400 flex items-center gap-1">
                      <Lightbulb className="w-3 h-3" />
                      –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
                    </div>
                  )}
                </div>
              )}
              
              {characteristic.reasoning && characteristic.reasoning !== 'ai_analysis' && (
                <div className="text-xs text-gray-400 bg-gray-800/30 rounded p-2">
                  {characteristic.reasoning}
                </div>
              )}
            </div>
          )}
        </div>

        {characteristic.isEditable !== false && characteristic.category !== 'declaration' && !isEditing && (
          <button
            onClick={onEdit}
            className="p-2 text-gray-400 hover:text-blue-400 hover:bg-blue-900/20 rounded transition-colors"
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É"
          >
            <Edit3 className="w-4 h-4" />
          </button>
        )}
        
        {characteristic.category === 'declaration' && (
          <div className="p-2 text-orange-400" title="–î–µ–∫–ª–∞—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ">
            <Lock className="w-4 h-4" />
          </div>
        )}
      </div>
    </div>
  );
};

export default function Step4Results({
  createdProductId,
  aiResponse,
  aiCharacteristics,
  isLoadingCharacteristics,
  onUpdateProductField,
  onPublish,
  onSaveOnly,
  onCreateInfographic,
  onClearForm,
  onLoadProductCharacteristics,
  onLoadAllCategoryCharacteristics,
  onCharacteristicUpdate,
  hasPendingData = false,
  isPublished = false,
  isPublishing = false
}: Step4ResultsProps) {
  const [characteristics, setCharacteristics] = useState<AICharacteristic[]>([]);
  const [editingCharacteristic, setEditingCharacteristic] = useState<number | null>(null);
  const [showOnlyFilled, setShowOnlyFilled] = useState(false);
  const [showSystemInfo, setShowSystemInfo] = useState(false);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    if (aiCharacteristics && aiCharacteristics.length > 0) {
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', aiCharacteristics.length);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –ø—É—Å—Ç—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      const sortedCharacteristics = [...aiCharacteristics].sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        if (a.isFilled && !b.isFilled) return -1;
        if (!a.isFilled && b.isFilled) return 1;
        
        // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –≥—Ä—É–ø–ø—ã - –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        return a.name.localeCompare(b.name);
      });
      
      setCharacteristics(sortedCharacteristics);
      
      const filledCount = sortedCharacteristics.filter(c => c.isFilled).length;
      
      console.log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${filledCount} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ ${sortedCharacteristics.length} –æ–±—â–∏—Ö`);
    }
  }, [aiCharacteristics]);

  const handleCharacteristicSave = async (characteristicId: number, newValue: string) => {
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É:', characteristicId, newValue);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setCharacteristics(prev => 
      prev.map(char => 
        char.id === characteristicId 
          ? { ...char, value: newValue, isFilled: !!newValue }
          : char
      )
    );

    setEditingCharacteristic(null);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (onCharacteristicUpdate) {
      try {
        await onCharacteristicUpdate(characteristicId, newValue);
        console.log('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', error);
      }
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const filteredCharacteristics = characteristics.filter(char => {
    if (showOnlyFilled && !char.isFilled) return false;
    return true;
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  const stats = {
    total: characteristics.length,
    filled: characteristics.filter(c => c.isFilled).length,
    editable: characteristics.filter(c => c.isEditable !== false).length,
    editableFilled: characteristics.filter(c => c.isEditable !== false && c.isFilled).length,
    system: characteristics.filter(c => c.category === 'user_protected').length,
    required: characteristics.filter(c => c.isRequired).length,
    requiredFilled: characteristics.filter(c => c.isRequired && c.isFilled).length,
    fillRate: characteristics.filter(c => c.isEditable !== false).length > 0 
      ? Math.round((characteristics.filter(c => c.isEditable !== false && c.isFilled).length / characteristics.filter(c => c.isEditable !== false).length) * 100) 
      : 0
  };

  if (isLoadingCharacteristics) {
    return (
      <div className="text-center py-8">
        <Loader className="w-8 h-8 text-blue-400 animate-spin mx-auto mb-4" />
        <p className="text-gray-400">–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –∏ —Å–æ–∑–¥–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...</p>
        <div className="mt-4 space-y-2">
          <div className="h-2 bg-gray-700 rounded animate-pulse"></div>
          <div className="h-2 bg-gray-700 rounded animate-pulse w-3/4 mx-auto"></div>
          <div className="h-2 bg-gray-700 rounded animate-pulse w-1/2 mx-auto"></div>
        </div>
        <p className="text-gray-500 text-sm mt-4">
          –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞...
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
      <div className="text-center">
        <h2 className="text-2xl font-bold text-white mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</h2>
        {hasPendingData && !isPublished ? (
          <div className="bg-yellow-900/20 border border-yellow-500/30 rounded-lg p-3 mb-4">
            <p className="text-yellow-300 text-sm flex items-center justify-center gap-2">
              <AlertCircle className="w-4 h-4" />
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Wildberries
            </p>
          </div>
        ) : isPublished ? (
          <div className="bg-green-900/20 border border-green-500/30 rounded-lg p-3 mb-4">
            <p className="text-green-300 text-sm flex items-center justify-center gap-2">
              <CheckCircle className="w-4 h-4" />
              –¢–æ–≤–∞—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Wildberries –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            </p>
          </div>
        ) : (
          <p className="text-gray-300">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π</p>
        )}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ */}
      <div className="bg-black/40 backdrop-blur-md rounded-xl border border-blue-500/20 p-6">
        <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
          <CheckCircle className="w-5 h-5 text-green-400" />
          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
        </h3>
        
        <div className="grid md:grid-cols-2 gap-4">
          <div>
            <label className="text-sm font-medium text-gray-300 block mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
            <input
              type="text"
              value={aiResponse?.generatedName || ''}
              onChange={(e) => onUpdateProductField('name', e.target.value)}
              className="w-full px-4 py-3 border border-blue-500/30 rounded-lg bg-black/40 text-white focus:border-blue-400 focus:ring-1 focus:ring-blue-400"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              disabled={isPublishing}
            />
          </div>
          
          <div>
            <label className="text-sm font-medium text-gray-300 block mb-2">–ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</label>
            <div className="flex items-center gap-4 px-4 py-3 border border-green-500/30 rounded-lg bg-green-900/10">
              <div className="text-2xl font-bold text-green-400">{stats.fillRate}%</div>
              <div className="text-sm text-green-300">
                {stats.editableFilled} –∏–∑ {stats.editable} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
              </div>
            </div>
          </div>
        </div>
        
        <div className="mt-4">
          <label className="text-sm font-medium text-gray-300 block mb-2">–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
          <textarea
            value={aiResponse?.seoDescription || ''}
            onChange={(e) => onUpdateProductField('description', e.target.value)}
            rows={4}
            className="w-full px-4 py-3 border border-blue-500/30 rounded-lg bg-black/40 text-white focus:border-blue-400 focus:ring-1 focus:ring-blue-400"
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π..."
            disabled={isPublishing}
          />
          <div className="flex items-center justify-between mt-2 text-xs text-gray-400">
            <span>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏–Ω–∞: 1300-2000 —Å–∏–º–≤–æ–ª–æ–≤</span>
            <span>{(aiResponse?.seoDescription || '').length} —Å–∏–º–≤–æ–ª–æ–≤</span>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="bg-black/40 backdrop-blur-md rounded-xl border border-blue-500/20 p-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h3 className="text-lg font-semibold text-white flex items-center gap-2 mb-2">
              <Sparkles className="w-5 h-5 text-blue-400" />
              –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ ({stats.total})
            </h3>
            
            <div className="flex items-center gap-6 text-sm flex-wrap">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded bg-green-500"></div>
                <span className="text-green-300">–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ò–ò: {stats.editableFilled}</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded bg-yellow-500"></div>
                <span className="text-yellow-300">–¢—Ä–µ–±—É—é—Ç –≤–≤–æ–¥–∞: {characteristics.filter(c => c.category === 'manual_required').length}</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded bg-blue-500"></div>
                <span className="text-blue-300">–°–∏—Å—Ç–µ–º–Ω—ã—Ö: {stats.system}</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded bg-orange-500"></div>
                <span className="text-orange-300">–î–µ–∫–ª–∞—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {characteristics.filter(c => c.category === 'declaration').length}</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded bg-gray-500"></div>
                <span className="text-gray-300">–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å: {stats.editable - stats.editableFilled}</span>
              </div>
            </div>
          </div>
          
          <div className="flex gap-2">
            <button
              onClick={() => setShowOnlyFilled(!showOnlyFilled)}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                showOnlyFilled 
                  ? 'bg-green-600 text-white shadow-md' 
                  : 'bg-gray-600 hover:bg-gray-700 text-gray-300'
              }`}
            >
              {showOnlyFilled ? '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ' : '–¢–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ'}
            </button>

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ */}
            {createdProductId && (
              <>
                <button
                  onClick={() => onLoadProductCharacteristics && onLoadProductCharacteristics(createdProductId)}
                  className="px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm font-medium transition-colors"
                  title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"
                >
                  üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                </button>
                
                <button
                  onClick={() => {
                    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                    const emptyCount = characteristics.filter(c => !c.isFilled && c.isEditable !== false).length;
                    alert(`–ù–∞–π–¥–µ–Ω–æ ${emptyCount} –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚úèÔ∏è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`);
                  }}
                  className="px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm font-medium transition-colors"
                  title="–ü–æ–º–æ—â—å –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é"
                >
                  üí° –ü–æ–º–æ—â—å
                </button>
                
                {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                {onLoadAllCategoryCharacteristics && aiResponse?.category?.id && (
                  <button
                    onClick={() => onLoadAllCategoryCharacteristics(aiResponse.category.id)}
                    className="px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm font-medium transition-colors"
                    title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                  >
                    üìã –í—Å–µ –ø–æ–ª—è
                  </button>
                )}
              </>
            )}
            
            <button
              onClick={() => setShowSystemInfo(!showSystemInfo)}
              className="p-2 bg-gray-600 hover:bg-gray-700 text-gray-300 rounded-lg transition-colors"
              title="–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            >
              <Settings className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {showSystemInfo && (
          <div className="mb-4 p-4 bg-gray-800/30 rounded-lg border border-gray-600/30">
            <h4 className="text-white font-medium mb-2 flex items-center gap-2">
              <Database className="w-4 h-4" />
              –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="text-gray-400 block">–¢–æ–≤–∞—Ä ID:</span>
                <span className="text-white font-mono">{createdProductId?.slice(-8) || 'N/A'}</span>
              </div>
              <div>
                <span className="text-gray-400 block">–ò–ò –°–∏—Å—Ç–µ–º–∞:</span>
                <span className="text-white">Unified AI v3</span>
              </div>
              <div>
                <span className="text-gray-400 block">–ú–æ–¥–µ–ª—å:</span>
                <span className="text-white">GPT-5-mini</span>
              </div>
              <div>
                <span className="text-gray-400 block">–°—Ç–∞—Ç—É—Å:</span>
                <span className={`${hasPendingData ? 'text-yellow-400' : isPublished ? 'text-green-400' : 'text-gray-400'}`}>
                  {hasPendingData ? '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä' : isPublished ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–°–æ–∑–¥–∞–Ω'}
                </span>
              </div>
            </div>
          </div>
        )}

        {filteredCharacteristics.length > 0 ? (
          <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
            {filteredCharacteristics.map((char) => (
              <CharacteristicItem
                key={char.id}
                characteristic={char}
                isEditing={editingCharacteristic === char.id}
                onEdit={() => setEditingCharacteristic(char.id)}
                onSave={(value) => handleCharacteristicSave(char.id, value)}
                onCancel={() => setEditingCharacteristic(null)}
              />
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <AlertCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-400 mb-4">
              {showOnlyFilled && stats.filled === 0 
                ? '–ù–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - –ò–ò –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' 
                : '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
              }
            </p>
            {showOnlyFilled && stats.filled === 0 ? (
              <button
                onClick={() => setShowOnlyFilled(false)}
                className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg"
              >
                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
              </button>
            ) : createdProductId ? (
              <button
                onClick={() => onLoadProductCharacteristics && onLoadProductCharacteristics(createdProductId)}
                className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg flex items-center gap-2 mx-auto"
              >
                <RotateCcw className="w-4 h-4" />
                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
              </button>
            ) : null}
          </div>
        )}
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      {characteristics.length > 0 && !isPublished && (
        <div className="bg-blue-900/20 border border-blue-500/30 rounded-xl p-4">
          <h4 className="text-white font-medium mb-3 flex items-center gap-2">
            <Lightbulb className="w-4 h-4 text-blue-400" />
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞:
          </h4>
          <ul className="text-sm text-blue-200 space-y-2">
            {stats.fillRate < 50 && (
              <li className="flex items-start gap-2">
                <span className="text-yellow-400 mt-0.5">‚Ä¢</span>
                <span>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –±–æ–ª—å—à–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Wildberries (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 60%+)</span>
              </li>
            )}
            {stats.requiredFilled < stats.required && (
              <li className="flex items-start gap-2">
                <span className="text-red-400 mt-0.5">‚Ä¢</span>
                <span>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ({stats.requiredFilled}/{stats.required})</span>
              </li>
            )}
            {stats.fillRate >= 80 && (
              <li className="flex items-start gap-2">
                <span className="text-green-400 mt-0.5">‚Ä¢</span>
                <span>–û—Ç–ª–∏—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫! –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</span>
              </li>
            )}
            <li className="flex items-start gap-2">
              <span className="text-blue-400 mt-0.5">‚Ä¢</span>
              <span>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ò–ò, –æ—Å–æ–±–µ–Ω–Ω–æ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-blue-400 mt-0.5">‚Ä¢</span>
              <span>–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã - –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º</span>
            </li>
          </ul>
        </div>
      )}

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="space-y-4">
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        {!isPublished && hasPendingData && (
          <div className="text-center space-y-4">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ */}
            <button
              onClick={onPublish}
              disabled={isPublishing || characteristics.length === 0}
              className={`px-8 py-4 rounded-xl flex items-center gap-3 font-semibold text-lg mx-auto transition-all duration-300 ${
                isPublishing || characteristics.length === 0
                  ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                  : 'bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white shadow-xl hover:shadow-2xl transform hover:scale-105'
              }`}
            >
              {isPublishing ? (
                <>
                  <Loader className="w-6 h-6 animate-spin" />
                  –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞...
                </>
              ) : (
                <>
                  <Globe className="w-6 h-6" />
                  –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ Wildberries
                </>
              )}
            </button>
            
            <p className="text-gray-400 text-sm">
              –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Wildberries
            </p>
            
            {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ */}
            <div className="border-t border-gray-600 pt-4">
              <button
                onClick={onSaveOnly}
                disabled={isPublishing || characteristics.length === 0}
                className="px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg font-medium shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 flex items-center gap-2 mx-auto"
              >
                <Database className="w-5 h-5" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ WB
              </button>
              <p className="text-gray-400 text-xs mt-2">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Wildberries
              </p>
            </div>
          </div>
        )}

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex flex-wrap gap-4 justify-center">
          {isPublished && (
            <button
              onClick={() => {
                console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ–≤–∞—Ä—É –Ω–∞ WB');
                // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ–≤–∞—Ä—É –Ω–∞ WB
              }}
              className="px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg flex items-center gap-2 font-medium shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200"
            >
              <ExternalLink className="w-5 h-5" />
              –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Wildberries
            </button>
          )}
          
          <button
            onClick={onCreateInfographic}
            disabled={!createdProductId}
            className="px-6 py-3 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-lg flex items-center gap-2 font-medium shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200"
          >
            <Palette className="w-5 h-5" />
            –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É
          </button>
          
          <button
            onClick={onClearForm}
            className="px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg flex items-center gap-2 font-medium shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200"
          >
            <RotateCcw className="w-5 h-5" />
            –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
          </button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
      {hasPendingData && !isPublished && (
        <div className="bg-yellow-900/20 border border-yellow-500/30 rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <Eye className="w-5 h-5 text-yellow-400" />
            <span className="text-yellow-300 font-medium">–†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</span>
          </div>
          <p className="text-yellow-200 text-sm">
            –î–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä" 
            –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Wildberries.
          </p>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ */}
      {isPublished && (
        <div className="bg-green-900/20 border border-green-500/30 rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <CheckCircle className="w-5 h-5 text-green-400" />
            <span className="text-green-300 font-medium">–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</span>
          </div>
          <p className="text-green-200 text-sm">
            –í–∞—à —Ç–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Wildberries. 
            –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä.
          </p>
        </div>
      )}
    </div>
  );
};